CCS PCH C Compiler, Version 4.104, 5967               29-may.-13 22:13

               Filename: G:\Nueva carpeta\program.lst

               ROM used: 9362 bytes (29%)
                         Largest free fragment is 17258
               RAM used: 488 (24%) at main() level
                         549 (27%) worst case
               Stack:    15 worst case (6 in main + 9 for interrupts)

*
1800:  GOTO   393E
*
1808:  MOVWF  04
180A:  MOVFF  FD8,05
180E:  MOVFF  FE0,06
1812:  MOVLB  0
1814:  MOVFF  FE9,0C
1818:  MOVFF  FEA,07
181C:  MOVFF  FE1,08
1820:  MOVFF  FE2,09
1824:  MOVFF  FD9,0A
1828:  MOVFF  FDA,0B
182C:  MOVFF  FF3,12
1830:  MOVFF  FF4,13
1834:  MOVFF  FFA,14
1838:  MOVFF  00,0E
183C:  MOVFF  01,0F
1840:  MOVFF  02,10
1844:  MOVFF  03,11
1848:  BTFSS  F9D.1
184A:  GOTO   1854
184E:  BTFSC  F9E.1
1850:  GOTO   2A6A
1854:  BTFSS  F9D.5
1856:  GOTO   1860
185A:  BTFSC  F9E.5
185C:  GOTO   29B8
1860:  BTFSS  FA0.5
1862:  GOTO   186C
1866:  BTFSC  FA1.5
1868:  GOTO   2878
186C:  MOVFF  0E,00
1870:  MOVFF  0F,01
1874:  MOVFF  10,02
1878:  MOVFF  11,03
187C:  MOVFF  0C,FE9
1880:  MOVFF  07,FEA
1884:  BSF    07.7
1886:  MOVFF  08,FE1
188A:  MOVFF  09,FE2
188E:  MOVFF  0A,FD9
1892:  MOVFF  0B,FDA
1896:  MOVFF  12,FF3
189A:  MOVFF  13,FF4
189E:  MOVFF  14,FFA
18A2:  MOVF   04,W
18A4:  MOVFF  06,FE0
18A8:  MOVFF  05,FD8
18AC:  RETFIE 0
.................... //........................PROGRAMA AUREBOT..................................... 
....................  
.................... // INGENIERIA DE TELECOMUNICACION 
.................... // DISPOSITIVOS ELECTRONICOS Y FOTONICOS 
....................  
.................... //INCLUIMOS LAS LIBRERIAS NECESARIAS 
....................  
.................... #include </lib/aurebot.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //Configuramos el pic para que trabaje a 48Mhz con un cristal de 4 Mhz. 
.................... #fuses XTPLL,MCLR,NOWDT,NOPROTECT,NOLVP,NODEBUG, VREGEN  
.................... #fuses IESO,BROWNOUT,STVREN,NOWRT,FCMEN,USBDIV,PLL1,CPUDIV1 
.................... #device adc=8 
.................... #use delay(clock=48000000) 
*
2D2E:  CLRF   FEA
2D30:  MOVLW  9E
2D32:  MOVWF  FE9
2D34:  MOVF   FEF,W
2D36:  BZ    2D54
2D38:  MOVLW  0F
2D3A:  MOVWF  01
2D3C:  CLRF   00
2D3E:  DECFSZ 00,F
2D40:  BRA    2D3E
2D42:  DECFSZ 01,F
2D44:  BRA    2D3C
2D46:  MOVLW  8F
2D48:  MOVWF  00
2D4A:  DECFSZ 00,F
2D4C:  BRA    2D4A
2D4E:  NOP   
2D50:  DECFSZ FEF,F
2D52:  BRA    2D38
2D54:  RETLW  00
*
30FA:  MOVLW  01
30FC:  SUBWF  x9E,F
30FE:  BNC   3118
3100:  CLRF   FEA
3102:  MOVLW  9E
3104:  MOVWF  FE9
3106:  MOVF   FEF,W
3108:  BZ    3118
310A:  MOVLW  02
310C:  MOVWF  00
310E:  DECFSZ 00,F
3110:  BRA    310E
3112:  BRA    3114
3114:  DECFSZ FEF,F
3116:  BRA    310A
3118:  RETLW  00
....................  
....................  
.................... // Incluimos el descriptor del cargador 
.................... #include "..\lib\bootloader\usb_bootloader.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... #define LOADER_SIZE        (0x17FF) 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if APPLICATION_END>0xFFFF 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if APPLICATION_END>0x1FFFF 
....................       #org 0xFFFF, 0x1FFFF {} 
....................    #else 
....................       #org 0xFFFF, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... // Incluimos las rutinas de gestión del usb y del "Comunications Device Class" 
.................... #include "..\lib\bootloader\usb_cdc.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////                            usb_cdc.h                            //// 
.................... ////                                                                 //// 
.................... //// Library for adding a virtual COM port on your PC over USB using //// 
.................... //// the standard Communication Device Class (CDC) specification.    //// 
.................... //// Including this file in your code will add all USB code,         //// 
.................... //// interrupts, descriptors and handlers required.  No other        //// 
.................... //// modifications need to be made.                                  //// 
.................... ////                                                                 //// 
.................... //// This library creates a virtual RS232 link between the PC and    //// 
.................... //// the PIC, therefore the library provided will be familiar to     //// 
.................... //// anyone with standard UART stream I/O:                           //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_kbhit() - Returns TRUE if there is one or more          //// 
.................... ////      character received and waiting in the receive buffer.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_getc() - Gets a character from the receive buffer.  If  //// 
.................... ////      there is no data in the receive buffer it will wait until  //// 
.................... ////      there is data in the receive buffer.  If you do not want   //// 
.................... ////      to wait in an infinit loop, use usb_cdc_kbhit() first to   //// 
.................... ////      check if there is data before calling usb_cdc_getc().      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc(char c) - Puts a character into the transmit       //// 
.................... ////      buffer.  If the transmit buffer is full it will wait until //// 
.................... ////      the transmit buffer is not full before putting the char    //// 
.................... ////      into the transmit buffer.  The transmit buffer is read by  //// 
.................... ////      the PC very quickly, and therefore the buffer should only  //// 
.................... ////      be full for a few milli-seconds.  If you are concerned     //// 
.................... ////      and don't want to be stuck in a long or infinite loop,     //// 
.................... ////      use usb_cdc_putready() to see if there is space in the     //// 
.................... ////      transmit buffer before putting data into the transmit      //// 
.................... ////      buffer.                                                    //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putready() - Returns TRUE if there is room left in the  //// 
.................... ////      transmit buffer for another character.                     //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_connected() - Returns TRUE if we received a             //// 
.................... ////      Set_Line_Coding.  On most serial terminal programs (such   //// 
.................... ////      as Hyperterminal), they will send a Set_Line_Coding        //// 
.................... ////      message when the program starts and it opens the virtual   //// 
.................... ////      COM port.  This is a simple way to determine if the PC     //// 
.................... ////      is ready to display data on a serial terminal program,     //// 
.................... ////      but is not garaunteed to work all the time or on other     //// 
.................... ////      terminal programs.                                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc_fast(char c) - Similar to usb_cdc_putc(), except   //// 
.................... ////      if the transmit buffer is full it will skip the char.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_line_coding - A structure used for Set_Line_Coding and  //// 
.................... ////       Get_Line_Coding.  Most of the time you can ignore this.   //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_break - If the PC has sent a break command, this will   //// 
.................... ////       hold the break time (in milli-seconds).  If the PC sends  //// 
.................... ////       a value of 0xFFFF the device is supposed to hold the      //// 
.................... ////       break until it sends a value of 0                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_carrier - Where Set_Control_Line_State value is stored. //// 
.................... ////       Of most relevance is the field dte_present, which is the  //// 
.................... ////       DTR setting.                                              //// 
.................... ////                                                                 //// 
.................... //// The following functions are also provided, and are ports of the //// 
.................... //// I/O functions in input.c.  See input.c and the CCS manual for   //// 
.................... //// documentation:                                                  //// 
.................... ////   get_float_usb() - Read a float number from the user           //// 
.................... ////   get_long_usb() - Read a long number from the user             //// 
.................... ////   get_int_usb() - Read an integer number from the user          //// 
.................... ////   get_string_usb(char *s, int max) - Read a string from the user. //// 
.................... ////   gethex_usb() - Read a byte, in HEX, from the user             //// 
.................... ////   gethex1_usb() - Read a HEX character                          //// 
.................... ////                                                                 //// 
.................... //// This driver will load all the rest of the USB code, and a set   //// 
.................... //// of descriptors that will properly describe a CDC device for a   //// 
.................... //// virtual COM port (usb_desc_cdc.h)                               //// 
.................... ////                                                                 //// 
.................... //// An .INF file is provided (cdc_NTXP.inf) that will load the      //// 
.................... //// standard CDC drivers for a virtual COM port in Windows          //// 
.................... //// NT/2000/XP and above.  Unfortunately we do not provide an .inf  //// 
.................... //// file for Windows 98 and ME.                                     //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// VERSION HISTORY                                                 //// 
.................... ////                                                                 //// 
.................... //// October 27th, 2005: Changed the way incoming packets are        //// 
.................... ////               handled in that CDC driver will not flush         //// 
.................... ////               endpoint until user has handled all data.  This   //// 
.................... ////               will prevent overflows as the USB will NAK        //// 
.................... ////               incoming packets until it is ready to receive     //// 
.................... ////               more.                                             //// 
.................... ////            When using 18F4550 family, the RX buffer is          //// 
.................... ////               mapped directly to the endpoint buffer - this     //// 
.................... ////               saves a chunk of RAM.                             //// 
.................... ////            When using the 18F4550 family, you can increase      //// 
.................... ////               the TX and RX size over 64 bytes.                 //// 
.................... ////            No longer send 0len packets in the TBE interrupt.    //// 
.................... ////            Hopefully fixed bugs that caused random crashes      //// 
.................... ////               if you tried sending more than 64 bytes.          //// 
.................... ////                                                                 //// 
.................... //// July 6th, 2005: Global interrupts disabled when writing to TX   //// 
.................... ////                   buffer.                                       //// 
.................... ////                                                                 //// 
.................... //// July 1st, 2005: Initial Release.                                //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... //api for the user: 
.................... #define usb_cdc_kbhit() (usb_cdc_get_buffer_status.got) 
.................... #define usb_cdc_putready() (usb_cdc_put_buffer_nextin<USB_CDC_DATA_IN_SIZE) 
.................... #define usb_cdc_connected() (usb_cdc_got_set_line_coding) 
.................... void usb_cdc_putc_fast(char c); 
.................... char usb_cdc_getc(void); 
.................... void usb_cdc_putc(char c); 
....................  
.................... //input.c ported to use CDC: 
.................... float get_float_usb(); 
.................... signed long get_long_usb(); 
.................... signed int get_int_usb(); 
.................... void get_string_usb(char* s, int max); 
.................... BYTE gethex_usb(); 
.................... BYTE gethex1_usb(); 
....................  
.................... //functions automatically called by USB handler code 
.................... void usb_isr_tkn_cdc(void); 
.................... void usb_cdc_init(void); 
.................... void usb_isr_tok_out_cdc_control_dne(void); 
.................... void usb_isr_tok_in_cdc_data_dne(void); 
.................... void usb_isr_tok_out_cdc_data_dne(void); 
....................  
.................... void usb_cdc_flush_out_buffer(void); 
....................  
.................... //Tells the CCS PIC USB firmware to include HID handling code. 
.................... #DEFINE USB_HID_DEVICE  FALSE 
.................... #DEFINE USB_CDC_DEVICE  TRUE 
....................  
.................... #define USB_CDC_COMM_IN_ENDPOINT       1 
.................... #define USB_CDC_COMM_IN_SIZE           8 
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_INTERRUPT 
.................... #define USB_EP1_TX_SIZE  USB_CDC_COMM_IN_SIZE 
....................  
.................... //pic to pc endpoint config 
.................... #define USB_CDC_DATA_IN_ENDPOINT       2 
.................... #define USB_CDC_DATA_IN_SIZE           64 
.................... #define USB_EP2_TX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_TX_SIZE  USB_CDC_DATA_IN_SIZE 
....................  
.................... //pc to pic endpoint config 
.................... #define USB_CDC_DATA_OUT_ENDPOINT       2 
.................... #define USB_CDC_DATA_OUT_SIZE           64 
.................... #define USB_EP2_RX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_RX_SIZE  USB_CDC_DATA_OUT_SIZE 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // Include the CCS USB Libraries.  See the comments at the top of these 
.................... // files for more information 
.................... // 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __USB_PIC_PERIF__ 
.................... #define __USB_PIC_PERIF__   1 
.................... #endif 
....................  
.................... #if __USB_PIC_PERIF__ 
....................  #if defined(__PCM__) 
....................   #error CDC requires bulk mode!  PIC16C7x5 does not have bulk mode 
....................  #else 
....................   #include <pic18_usb.h>   //Microchip 18Fxx5x hardware layer for usb.c 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
....................  #endif 
.................... #else 
....................  #include <usbn960x.c>   //National 960x hardware layer for usb.c 
.................... #endif 
.................... #include "..\lib\bootloader\usb_desc_cdc.h"   //USB Configuration and Device descriptors for this UBS device 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_desc_cdc.h                            //// 
.................... ////                                                                   //// 
.................... //// An example set of device / configuration descriptors for use with //// 
.................... //// CCS's CDC Virtual COM Port driver (see usb_cdc.h)                 //// 
.................... ////                                                                   //// 
.................... //// Two examples are provided:                                        //// 
.................... ////      ex_usb_serial.c                                              //// 
.................... ////      ex_usb_serial2.c                                             //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// 10/28/05:                                                         //// 
.................... ////    Bulk endpoint sizes updated to allow more than 255 byte        //// 
.................... ////    packets.                                                       //// 
.................... ////    Changed device to USB 1.10                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    #DEFINE USB_TOTAL_CONFIG_LEN      67  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
....................    const char USB_CONFIG_DESC[] = { 
....................    //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................       //    config(s) 
....................       //    interface(s) 
....................       //    class(es) 
....................       //    endpoint(s) 
....................  
....................    //config_descriptor for config index 1 
....................          USB_DESC_CONFIG_LEN, //length of descriptor size          ==0 
....................          USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==1 
....................          USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==2,3 
....................          2, //number of interfaces this device supports       ==4 
....................          0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==5 
....................          0x00, //index of string descriptor for this configuration      ==6 
....................          0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==7 
....................          0x32, //maximum bus power required (maximum milliamperes/2)  (0x32 = 100mA)  ==8 
....................  
....................    //interface descriptor 0 (comm class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =9 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =10 
....................          0x00, //number defining this interface (IF we had more than one interface)    ==11 
....................          0x00, //alternate setting     ==12 
....................          1, //number of endpoints   ==13 
....................          0x02, //class code, 02 = Comm Interface Class     ==14 
....................          0x02, //subclass code, 2 = Abstract     ==15 
....................          0x01, //protocol code, 1 = v.25ter      ==16 
....................          0x00, //index of string descriptor for interface      ==17 
....................  
....................    //class descriptor [functional header] 
....................          5, //length of descriptor    ==18 
....................          0x24, //dscriptor type (0x24 == )      ==19 
....................          0, //sub type (0=functional header) ==20 
....................          0x10,0x01, //      ==21,22 //cdc version 
....................  
....................    //class descriptor [acm header] 
....................          4, //length of descriptor    ==23 
....................          0x24, //dscriptor type (0x24 == )      ==24 
....................          2, //sub type (2=ACM)   ==25 
....................          2, //capabilities    ==26  //we support Set_Line_Coding, Set_Control_Line_State, Get_Line_Coding, and the notification Serial_State. 
....................  
....................    //class descriptor [union header] 
....................          5, //length of descriptor    ==27 
....................          0x24, //dscriptor type (0x24 == )      ==28 
....................          6, //sub type (6=union)    ==29 
....................          0, //master intf     ==30  //The interface number of the Communication or Dat a Cl ass interface, designated as the masteror controlling interface for the union. 
....................          1, //save intf0      ==31  //Interface number of first slave or associated interface in the union. * 
....................  
....................    //class descriptor [call mgmt header] 
....................          5, //length of descriptor    ==32 
....................          0x24, //dscriptor type (0x24 == )      ==33 
....................          1, //sub type (1=call mgmt)   ==34 
....................          0, //capabilities          ==35  //device does not handle call management itself 
....................          1, //data interface        ==36  //interface number of data class interface 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==37 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==38 
....................          USB_CDC_COMM_IN_ENDPOINT | 0x80, //endpoint number and direction 
....................          0x03, //transfer type supported (0x03 is interrupt)         ==40 
....................          USB_CDC_COMM_IN_SIZE,0x00, //maximum packet size supported                  ==41,42 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==43 
....................  
....................    //interface descriptor 1 (data class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =44 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =45 
....................          0x01, //number defining this interface (IF we had more than one interface)    ==46 
....................          0x00, //alternate setting     ==47 
....................          2, //number of endpoints   ==48 
....................          0x0A, //class code, 0A = Data Interface Class     ==49 
....................          0x00, //subclass code      ==50 
....................          0x00, //protocol code      ==51 
....................          0x00, //index of string descriptor for interface      ==52 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==60 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==61 
....................          USB_CDC_DATA_OUT_ENDPOINT, //endpoint number and direction (0x02 = EP2 OUT)       ==62 
....................          0x02, //transfer type supported (0x02 is bulk)         ==63 
.................... //         make8(USB_CDC_DATA_OUT_SIZE,0),make8(USB_CDC_DATA_OUT_SIZE,1), //maximum packet size supported                  ==64, 65 
....................          USB_CDC_DATA_OUT_SIZE & 0xFF, (USB_CDC_DATA_OUT_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==66 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==53 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==54 
....................          USB_CDC_DATA_IN_ENDPOINT | 0x80, //endpoint number and direction (0x82 = EP2 IN)       ==55 
....................          0x02, //transfer type supported (0x02 is bulk)         ==56 
.................... //         make8(USB_CDC_DATA_IN_SIZE,0),make8(USB_CDC_DATA_IN_SIZE,1), //maximum packet size supported                  ==57, 58 
....................          USB_CDC_DATA_IN_SIZE & 0xFF, (USB_CDC_DATA_IN_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==59 
....................    }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   2 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={2}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][USB_MAX_NUM_INTERFACES][4]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1-4 
....................          18,23,27,32, 
....................       //interface 1 
....................          //no classes for this interface 
....................          0xFFFF,0xFFFF,0xFFFF,0xFFFF 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................       //starts of with device configuration. only one possible 
....................          USB_DESC_DEVICE_LEN, //the length of this report   ==0 
....................          0x01, //the constant DEVICE (DEVICE 0x01)  ==1 
....................          0x10,0x01, //usb version in bcd  ==2,3 
....................          0x02, //class code. 0x02=Communication Device Class ==4 
....................          0x00, //subclass code ==5 
....................          0x00, //protocol code ==6 
....................          USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==7 
....................          0xD8,0x04, //vendor id (0x04D8 is Microchip, or is it 0x0461 ??) ==8,9 
....................          0x01,0x00, //product id ==10,11 
....................          0x00,0x01, //device release number  ==12,13 
....................          0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==14 
....................          0x02, //index of string descriptor of the product  ==15 
....................          0x00, //index of string descriptor of serial number  ==16 
....................          USB_NUM_CONFIGURATIONS  //number of possible configurations  ==17 
....................    }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,14}; 
....................  
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          10, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'U',0, 
....................          'R',0, 
....................          'E',0, 
....................    //string 2 
....................          40, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'u',0, 
....................          'r',0, 
....................          'e',0, 
....................          'B',0, 
....................          'o',0, 
....................          'a',0, 
....................          'r',0, 
....................          'd',0, 
....................          ' ',0, 
....................          'U',0, 
....................          's',0, 
....................          'b',0, 
....................          '-',0, 
....................          'S',0, 
....................          'e',0, 
....................          'r',0, 
....................          'i',0, 
....................          'e',0,         
.................... }; 
....................  
.................... #ENDIF 
....................  
.................... #include <usb.c>        //handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
23C0:  CLRF   03
23C2:  MOVF   xBF,W
23C4:  ADDLW  70
23C6:  MOVWF  FE9
23C8:  MOVLW  0F
23CA:  ADDWFC 03,W
23CC:  MOVWF  FEA
23CE:  MOVF   FEF,F
23D0:  BZ    2404
23D2:  CLRF   xC1
23D4:  MOVFF  BF,C0
23D8:  CLRF   xC3
23DA:  MOVLW  08
23DC:  MOVWF  xC2
23DE:  CALL   1AF8
23E2:  MOVFF  02,C1
23E6:  MOVFF  01,C0
23EA:  MOVLW  04
23EC:  ADDWF  xC0,F
23EE:  MOVLW  00
23F0:  ADDWFC xC1,F
23F2:  MOVFF  C0,FE9
23F6:  MOVLW  04
23F8:  ADDWF  xC1,W
23FA:  MOVWF  FEA
23FC:  MOVFF  FEF,C0
2400:  BTFSS  xC0.7
2402:  BRA    2408
2404:  MOVLW  00
2406:  BRA    240A
2408:  MOVLW  01
240A:  MOVWF  01
.................... } 
240C:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
2DEA:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
2DEC:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2DEE:  MOVLW  08
2DF0:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
2DF2:  MOVF   F94,W
2DF4:  IORLW  30
2DF6:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
2DF8:  CLRF   1F
2DFA:  CLRF   16
2DFC:  BTFSC  FF2.7
2DFE:  BSF    16.7
2E00:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
2E02:  CALL   1BB0
2E06:  BTFSC  16.7
2E08:  BSF    FF2.7
....................    //__usb_kbhit_status=0; 
.................... } 
2E0A:  GOTO   2E10 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
.................... { 
*
2E14:  CLRF   16
2E16:  BTFSC  FF2.7
2E18:  BSF    16.7
2E1A:  BCF    FF2.7
....................    usb_token_reset(); 
2E1C:  CALL   1BB0
2E20:  BTFSC  16.7
2E22:  BSF    FF2.7
....................    UCON = 0; 
2E24:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2E26:  MOVLW  14
2E28:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
2E2A:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
2E2C:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
2E2E:  MOVLW  01
2E30:  MOVWF  1F
.................... } 
2E32:  GOTO   2E3C (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
2E0E:  BRA    2DEA
.................... } 
2E10:  GOTO   2E5A (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
2E36:  BTFSC  F6D.3
2E38:  BRA    2E3C
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2E3A:  BRA    2E14
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
2E3C:  DECFSZ 1F,W
2E3E:  BRA    2E56
2E40:  BTFSC  F6D.5
2E42:  BRA    2E56
....................    { 
....................       UIR=0; 
2E44:  CLRF   F68
....................       UIE=0; 
2E46:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2E48:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2E4A:  MOVLW  C0
2E4C:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
2E4E:  MOVLW  11
2E50:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2E52:  MOVLW  02
2E54:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2E56:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
2E58:  BRA    2E0E
....................  
....................    do  
....................    { 
....................       usb_task(); 
2E5A:  RCALL  2E36
....................    } while (usb_state != USB_STATE_POWERED); 
2E5C:  MOVF   1F,W
2E5E:  SUBLW  02
2E60:  BNZ   2E5A
.................... } 
2E62:  GOTO   3994 (RETURN)
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
240E:  MOVFF  BA,BF
2412:  RCALL  23C0
2414:  MOVF   01,F
2416:  BTFSC  FD8.2
2418:  BRA    2512
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
241A:  CLRF   xC1
241C:  MOVFF  BA,C0
2420:  CLRF   xC3
2422:  MOVLW  08
2424:  MOVWF  xC2
2426:  CALL   1AF8
242A:  MOVFF  02,C0
242E:  MOVFF  01,BF
2432:  MOVLW  04
2434:  ADDWF  xBF,F
2436:  MOVLW  00
2438:  ADDWFC xC0,F
243A:  MOVLW  01
243C:  ADDWF  xBF,W
243E:  MOVWF  01
2440:  MOVLW  00
2442:  ADDWFC xC0,W
2444:  MOVWF  03
2446:  MOVFF  01,FE9
244A:  MOVLW  04
244C:  ADDWF  03,W
244E:  MOVWF  FEA
2450:  MOVFF  BB,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
2454:  MOVF   xBD,W
2456:  SUBLW  02
2458:  BNZ   2496
....................       { 
....................          i = EP_BDxST_I(endpoint); 
245A:  CLRF   xC1
245C:  MOVFF  BA,C0
2460:  CLRF   xC3
2462:  MOVLW  08
2464:  MOVWF  xC2
2466:  CALL   1AF8
246A:  MOVFF  02,C0
246E:  MOVFF  01,BF
2472:  MOVLW  04
2474:  ADDWF  xBF,F
2476:  MOVLW  00
2478:  ADDWFC xC0,F
247A:  MOVFF  BF,FE9
247E:  MOVLW  04
2480:  ADDWF  xC0,W
2482:  MOVWF  FEA
2484:  MOVFF  FEF,BE
....................          if (bit_test(i,6)) 
2488:  BTFSS  xBE.6
248A:  BRA    2490
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
248C:  CLRF   xBD
....................          else 
248E:  BRA    2494
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
2490:  MOVLW  01
2492:  MOVWF  xBD
....................       } 
....................       else if (tgl == USB_DTS_USERX)  
2494:  BRA    24C6
2496:  MOVF   xBD,W
2498:  SUBLW  04
249A:  BNZ   24C6
....................       { 
....................          i = EP_BDxST_O(endpoint); 
249C:  CLRF   xC1
249E:  MOVFF  BA,C0
24A2:  CLRF   xC3
24A4:  MOVLW  08
24A6:  MOVWF  xC2
24A8:  CALL   1AF8
24AC:  MOVFF  01,FE9
24B0:  MOVLW  04
24B2:  ADDWF  02,W
24B4:  MOVWF  FEA
24B6:  MOVFF  FEF,BE
....................          if (bit_test(i,6)) 
24BA:  BTFSS  xBE.6
24BC:  BRA    24C4
....................             tgl = USB_DTS_DATA1; 
24BE:  MOVLW  01
24C0:  MOVWF  xBD
....................          else 
24C2:  BRA    24C6
....................             tgl = USB_DTS_DATA0; 
24C4:  CLRF   xBD
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
24C6:  DECFSZ xBD,W
24C8:  BRA    24D0
....................          i=0xC8;  //DATA1, UOWN 
24CA:  MOVLW  C8
24CC:  MOVWF  xBE
....................       else //if (tgl == USB_DTS_DATA0)  
24CE:  BRA    24D4
....................          i=0x88; //DATA0, UOWN 
24D0:  MOVLW  88
24D2:  MOVWF  xBE
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
24D4:  BTFSC  xBC.0
24D6:  BSF    xBE.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
24D8:  BTFSC  xBC.1
24DA:  BSF    xBE.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
24DC:  CLRF   xC1
24DE:  MOVFF  BA,C0
24E2:  CLRF   xC3
24E4:  MOVLW  08
24E6:  MOVWF  xC2
24E8:  CALL   1AF8
24EC:  MOVFF  02,C0
24F0:  MOVFF  01,BF
24F4:  MOVLW  04
24F6:  ADDWF  xBF,F
24F8:  MOVLW  00
24FA:  ADDWFC xC0,F
24FC:  MOVFF  BF,FE9
2500:  MOVLW  04
2502:  ADDWF  xC0,W
2504:  MOVWF  FEA
2506:  MOVFF  BE,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
250A:  MOVLW  01
250C:  MOVWF  01
250E:  BRA    2516
....................    } 
....................    else  
2510:  BRA    2512
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
2512:  MOVLW  00
2514:  MOVWF  01
.................... } 
2516:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
*
25FC:  MOVFF  B2,BF
2600:  RCALL  23C0
2602:  MOVF   01,F
2604:  BZ    2692
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
2606:  CLRF   xC1
2608:  MOVFF  B2,C0
260C:  CLRF   xC3
260E:  MOVLW  08
2610:  MOVWF  xC2
2612:  CALL   1AF8
2616:  MOVFF  02,BB
261A:  MOVFF  01,BA
261E:  MOVLW  04
2620:  ADDWF  xBA,F
2622:  MOVLW  00
2624:  ADDWFC xBB,F
2626:  MOVLW  02
2628:  ADDWF  xBA,W
262A:  MOVWF  01
262C:  MOVLW  00
262E:  ADDWFC xBB,W
2630:  MOVWF  03
2632:  MOVFF  01,FE9
2636:  MOVLW  04
2638:  ADDWF  03,W
263A:  MOVWF  FEA
263C:  MOVFF  FEC,03
2640:  MOVF   FED,F
2642:  MOVFF  FEF,B8
2646:  MOVFF  03,B9
....................       memcpy(buff_add, ptr, len);      
264A:  MOVFF  B9,FEA
264E:  MOVFF  B8,FE9
2652:  MOVFF  B4,FE2
2656:  MOVFF  B3,FE1
265A:  MOVFF  B6,02
265E:  MOVFF  B5,01
2662:  MOVF   01,F
2664:  BZ    266A
2666:  INCF   02,F
2668:  BRA    266E
266A:  MOVF   02,F
266C:  BZ    267A
266E:  MOVFF  FE6,FEE
2672:  DECFSZ 01,F
2674:  BRA    266E
2676:  DECFSZ 02,F
2678:  BRA    266E
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
267A:  MOVFF  B2,BA
267E:  MOVFF  B6,BC
2682:  MOVFF  B5,BB
2686:  MOVFF  B7,BD
268A:  RCALL  240E
268C:  MOVF   01,W
268E:  BRA    2696
....................    } 
....................    else  
2690:  BRA    2692
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
2692:  MOVLW  00
2694:  MOVWF  01
.................... } 
2696:  GOTO   26B6 (RETURN)
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
22D4:  CLRF   xC1
22D6:  MOVFF  B1,C0
22DA:  CLRF   xC3
22DC:  MOVLW  08
22DE:  MOVWF  xC2
22E0:  RCALL  1AF8
22E2:  MOVFF  01,FE9
22E6:  MOVLW  04
22E8:  ADDWF  02,W
22EA:  MOVWF  FEA
22EC:  MOVFF  FEF,B3
....................    if (tgl == USB_DTS_TOGGLE)  
22F0:  MOVF   xB2,W
22F2:  SUBLW  02
22F4:  BNZ   2302
....................    { 
....................       if (bit_test(i,6)) 
22F6:  BTFSS  xB3.6
22F8:  BRA    22FE
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
22FA:  CLRF   xB2
....................       else 
22FC:  BRA    2302
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
22FE:  MOVLW  01
2300:  MOVWF  xB2
....................    } 
....................    if (tgl == USB_DTS_STALL)  
2302:  MOVF   xB2,W
2304:  SUBLW  03
2306:  BNZ   233C
....................    { 
....................       i = 0x84; 
2308:  MOVLW  84
230A:  MOVWF  xB3
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
230C:  CLRF   xC1
230E:  MOVFF  B1,C0
2312:  CLRF   xC3
2314:  MOVLW  08
2316:  MOVWF  xC2
2318:  CALL   1AF8
231C:  MOVFF  02,B7
2320:  MOVFF  01,B6
2324:  MOVLW  04
2326:  ADDWF  xB6,F
2328:  MOVLW  00
232A:  ADDWFC xB7,F
232C:  MOVFF  B6,FE9
2330:  MOVLW  04
2332:  ADDWF  xB7,W
2334:  MOVWF  FEA
2336:  MOVLW  84
2338:  MOVWF  FEF
....................    } 
....................    else if (tgl == USB_DTS_DATA1) 
233A:  BRA    234A
233C:  DECFSZ xB2,W
233E:  BRA    2346
....................       i = 0xC8;  //DATA1, UOWN 
2340:  MOVLW  C8
2342:  MOVWF  xB3
....................    else //if (tgl == USB_DTS_DATA0)  
2344:  BRA    234A
....................       i = 0x88; //DATA0, UOWN 
2346:  MOVLW  88
2348:  MOVWF  xB3
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
234A:  BCF    FD8.0
234C:  RLCF   xB1,W
234E:  CLRF   03
2350:  MOVFF  FF2,B6
2354:  BCF    FF2.7
2356:  CALL   191E
235A:  TBLRD*+
235C:  MOVFF  FF5,03
2360:  BTFSC  xB6.7
2362:  BSF    FF2.7
2364:  MOVWF  xB4
2366:  MOVFF  03,B5
....................    EP_BDxCNT_O(endpoint) = len; 
236A:  CLRF   xC1
236C:  MOVFF  B1,C0
2370:  CLRF   xC3
2372:  MOVLW  08
2374:  MOVWF  xC2
2376:  CALL   1AF8
237A:  MOVFF  01,B6
237E:  MOVLW  01
2380:  ADDWF  01,W
2382:  MOVWF  01
2384:  MOVLW  00
2386:  ADDWFC 02,W
2388:  MOVWF  03
238A:  MOVFF  01,FE9
238E:  MOVLW  04
2390:  ADDWF  03,W
2392:  MOVWF  FEA
2394:  MOVFF  B4,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
2398:  BTFSC  xB5.0
239A:  BSF    xB3.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
239C:  BTFSC  xB5.1
239E:  BSF    xB3.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
23A0:  CLRF   xC1
23A2:  MOVFF  B1,C0
23A6:  CLRF   xC3
23A8:  MOVLW  08
23AA:  MOVWF  xC2
23AC:  CALL   1AF8
23B0:  MOVFF  01,FE9
23B4:  MOVLW  04
23B6:  ADDWF  02,W
23B8:  MOVWF  FEA
23BA:  MOVFF  B3,FEF
.................... } 
23BE:  RETLW  00
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
*
2578:  CLRF   xC1
257A:  MOVFF  B2,C0
257E:  CLRF   xC3
2580:  MOVLW  08
2582:  MOVWF  xC2
2584:  CALL   1AF8
2588:  MOVFF  02,B4
258C:  MOVFF  01,B3
2590:  MOVLW  01
2592:  ADDWF  01,W
2594:  MOVWF  01
2596:  MOVLW  00
2598:  ADDWFC 02,W
259A:  MOVWF  03
259C:  MOVFF  01,FE9
25A0:  MOVLW  04
25A2:  ADDWF  03,W
25A4:  MOVWF  FEA
25A6:  CLRF   03
25A8:  MOVFF  FEF,01
25AC:  MOVFF  03,02
.................... } 
25B0:  GOTO   25BE (RETURN)
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
....................    i = EP_BDxCNT_O(endpoint); 
....................    st = EP_BDxST_O(endpoint); 
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
....................    if (bit_test(st,1)) {bit_set(i,9);} 
....................  
....................    if (i < max) {max = i;} 
....................     
....................    memcpy(ptr, al ,max); 
....................  
....................    return(max); 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
....................  
....................    return(max); 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
20D2:  BCF    xB2.0
20D4:  BTFSC  xB1.7
20D6:  BSF    xB2.0
....................    endpoint &= 0x7F; 
20D8:  BCF    xB1.7
....................     
....................    if (direction)  
20DA:  BTFSS  xB2.0
20DC:  BRA    210C
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
20DE:  CLRF   xC1
20E0:  MOVFF  B1,C0
20E4:  CLRF   xC3
20E6:  MOVLW  08
20E8:  MOVWF  xC2
20EA:  RCALL  1AF8
20EC:  MOVFF  02,B4
20F0:  MOVFF  01,B3
20F4:  MOVLW  04
20F6:  ADDWF  xB3,F
20F8:  MOVLW  00
20FA:  ADDWFC xB4,F
20FC:  MOVFF  B3,FE9
2100:  MOVLW  04
2102:  ADDWF  xB4,W
2104:  MOVWF  FEA
2106:  MOVLW  84
2108:  MOVWF  FEF
....................    } 
....................    else  
210A:  BRA    2128
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
210C:  CLRF   xC1
210E:  MOVFF  B1,C0
2112:  CLRF   xC3
2114:  MOVLW  08
2116:  MOVWF  xC2
2118:  RCALL  1AF8
211A:  MOVFF  01,FE9
211E:  MOVLW  04
2120:  ADDWF  02,W
2122:  MOVWF  FEA
2124:  MOVLW  84
2126:  MOVWF  FEF
....................    } 
.................... } 
2128:  GOTO   21C6 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
207A:  BCF    xB2.0
207C:  BTFSC  xB1.7
207E:  BSF    xB2.0
....................    endpoint &= 0x7F; 
2080:  BCF    xB1.7
....................     
....................    if (direction)  
2082:  BTFSS  xB2.0
2084:  BRA    20B4
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
2086:  CLRF   xC1
2088:  MOVFF  B1,C0
208C:  CLRF   xC3
208E:  MOVLW  08
2090:  MOVWF  xC2
2092:  RCALL  1AF8
2094:  MOVFF  02,B4
2098:  MOVFF  01,B3
209C:  MOVLW  04
209E:  ADDWF  xB3,F
20A0:  MOVLW  00
20A2:  ADDWFC xB4,F
20A4:  MOVFF  B3,FE9
20A8:  MOVLW  04
20AA:  ADDWF  xB4,W
20AC:  MOVWF  FEA
20AE:  MOVLW  88
20B0:  MOVWF  FEF
....................      #endif 
....................    } 
....................    else  
20B2:  BRA    20CE
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
20B4:  CLRF   xC1
20B6:  MOVFF  B1,C0
20BA:  CLRF   xC3
20BC:  MOVLW  08
20BE:  MOVWF  xC2
20C0:  RCALL  1AF8
20C2:  MOVFF  01,FE9
20C6:  MOVLW  04
20C8:  ADDWF  02,W
20CA:  MOVWF  FEA
20CC:  CLRF   FEF
....................    } 
.................... } 
20CE:  GOTO   21BA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
212C:  BCF    xB2.0
212E:  BTFSC  xB1.7
2130:  BSF    xB2.0
....................    endpoint &= 0x7F; 
2132:  BCF    xB1.7
....................     
....................    if (direction)  
2134:  BTFSS  xB2.0
2136:  BRA    2166
....................    { 
....................       st=EP_BDxST_I(endpoint); 
2138:  CLRF   xC1
213A:  MOVFF  B1,C0
213E:  CLRF   xC3
2140:  MOVLW  08
2142:  MOVWF  xC2
2144:  RCALL  1AF8
2146:  MOVFF  02,B5
214A:  MOVFF  01,B4
214E:  MOVLW  04
2150:  ADDWF  xB4,F
2152:  MOVLW  00
2154:  ADDWFC xB5,F
2156:  MOVFF  B4,FE9
215A:  MOVLW  04
215C:  ADDWF  xB5,W
215E:  MOVWF  FEA
2160:  MOVFF  FEF,B3
....................    } 
....................    else  
2164:  BRA    2182
....................    { 
....................       st=EP_BDxST_O(endpoint); 
2166:  CLRF   xC1
2168:  MOVFF  B1,C0
216C:  CLRF   xC3
216E:  MOVLW  08
2170:  MOVWF  xC2
2172:  RCALL  1AF8
2174:  MOVFF  01,FE9
2178:  MOVLW  04
217A:  ADDWF  02,W
217C:  MOVWF  FEA
217E:  MOVFF  FEF,B3
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
2182:  BTFSS  xB3.7
2184:  BRA    218A
2186:  BTFSC  xB3.2
2188:  BRA    218E
218A:  MOVLW  00
218C:  BRA    2190
218E:  MOVLW  01
2190:  MOVWF  01
.................... } 
2192:  GOTO   21DA (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
25D8:  MOVFF  B2,F6E
....................     
....................    if (address)  
25DC:  MOVF   xB2,F
25DE:  BZ    25E6
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
25E0:  MOVLW  04
25E2:  MOVWF  1F
....................    } 
....................    else  
25E4:  BRA    25EA
....................    { 
....................       usb_state = USB_STATE_POWERED; 
25E6:  MOVLW  02
25E8:  MOVWF  1F
....................    } 
.................... } 
25EA:  GOTO   25F8 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
1D5E:  MOVF   xB1,F
1D60:  BNZ   1D6A
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
1D62:  MOVLW  04
1D64:  MOVWF  1F
....................       usb_disable_endpoints(); 
1D66:  RCALL  1B76
....................    } 
....................    else  
1D68:  BRA    1F38
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
1D6A:  MOVLW  05
1D6C:  MOVWF  1F
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
1D6E:  MOVLW  04
1D70:  MOVWF  xB4
1D72:  MOVLW  98
1D74:  MOVWF  xB3
....................       for (en=1; en<USB_NUM_UEP; en++)  
1D76:  MOVLW  01
1D78:  MOVWF  xB2
1D7A:  MOVF   xB2,W
1D7C:  SUBLW  0F
1D7E:  BTFSS  FD8.0
1D80:  BRA    1F38
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
1D82:  MOVFF  B2,BA
1D86:  RCALL  1B16
....................          new_uep = 0; 
1D88:  CLRF   xB5
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
1D8A:  CLRF   03
1D8C:  MOVF   xB2,W
1D8E:  MOVFF  FF2,B9
1D92:  BCF    FF2.7
1D94:  RCALL  18CE
1D96:  BTFSC  xB9.7
1D98:  BSF    FF2.7
1D9A:  SUBLW  FF
1D9C:  BZ    1E64
....................          { 
....................             new_uep = 0x04; 
1D9E:  MOVLW  04
1DA0:  MOVWF  xB5
....................             len = usb_ep_rx_size[en]; 
1DA2:  BCF    FD8.0
1DA4:  RLCF   xB2,W
1DA6:  CLRF   03
1DA8:  MOVFF  FF2,B9
1DAC:  BCF    FF2.7
1DAE:  RCALL  191E
1DB0:  TBLRD*+
1DB2:  MOVFF  FF5,03
1DB6:  BTFSC  xB9.7
1DB8:  BSF    FF2.7
1DBA:  MOVWF  xB6
1DBC:  MOVFF  03,B7
....................             EP_BDxCNT_O(en) = len; 
1DC0:  CLRF   xC1
1DC2:  MOVFF  B2,C0
1DC6:  CLRF   xC3
1DC8:  MOVLW  08
1DCA:  MOVWF  xC2
1DCC:  RCALL  1AF8
1DCE:  MOVFF  01,B9
1DD2:  MOVLW  01
1DD4:  ADDWF  01,W
1DD6:  MOVWF  01
1DD8:  MOVLW  00
1DDA:  ADDWFC 02,W
1DDC:  MOVWF  03
1DDE:  MOVFF  01,FE9
1DE2:  MOVLW  04
1DE4:  ADDWF  03,W
1DE6:  MOVWF  FEA
1DE8:  MOVFF  B6,FEF
....................             EP_BDxADR_O(en) = addy; 
1DEC:  CLRF   xC1
1DEE:  MOVFF  B2,C0
1DF2:  CLRF   xC3
1DF4:  MOVLW  08
1DF6:  MOVWF  xC2
1DF8:  RCALL  1AF8
1DFA:  MOVFF  01,B9
1DFE:  MOVLW  02
1E00:  ADDWF  01,W
1E02:  MOVWF  01
1E04:  MOVLW  00
1E06:  ADDWFC 02,W
1E08:  MOVWF  03
1E0A:  MOVFF  01,FE9
1E0E:  MOVLW  04
1E10:  ADDWF  03,W
1E12:  MOVWF  FEA
1E14:  MOVFF  B4,FEC
1E18:  MOVF   FED,F
1E1A:  MOVFF  B3,FEF
....................             addy += usb_ep_rx_size[en]; 
1E1E:  BCF    FD8.0
1E20:  RLCF   xB2,W
1E22:  CLRF   03
1E24:  MOVFF  FF2,B9
1E28:  BCF    FF2.7
1E2A:  RCALL  191E
1E2C:  TBLRD*+
1E2E:  MOVFF  FF5,03
1E32:  BTFSC  xB9.7
1E34:  BSF    FF2.7
1E36:  ADDWF  xB3,F
1E38:  MOVF   03,W
1E3A:  ADDWFC xB4,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
1E3C:  MOVLW  88
1E3E:  MOVWF  xB8
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
1E40:  BTFSC  xB7.0
1E42:  BSF    xB8.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
1E44:  BTFSC  xB7.1
1E46:  BSF    xB8.1
....................             EP_BDxST_O(en) = i; 
1E48:  CLRF   xC1
1E4A:  MOVFF  B2,C0
1E4E:  CLRF   xC3
1E50:  MOVLW  08
1E52:  MOVWF  xC2
1E54:  RCALL  1AF8
1E56:  MOVFF  01,FE9
1E5A:  MOVLW  04
1E5C:  ADDWF  02,W
1E5E:  MOVWF  FEA
1E60:  MOVFF  B8,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
1E64:  CLRF   03
1E66:  MOVF   xB2,W
1E68:  MOVFF  FF2,B9
1E6C:  BCF    FF2.7
1E6E:  RCALL  18AE
1E70:  BTFSC  xB9.7
1E72:  BSF    FF2.7
1E74:  SUBLW  FF
1E76:  BZ    1F02
....................          { 
....................             new_uep |= 0x02; 
1E78:  BSF    xB5.1
....................             EP_BDxADR_I(en) = addy; 
1E7A:  CLRF   xC1
1E7C:  MOVFF  B2,C0
1E80:  CLRF   xC3
1E82:  MOVLW  08
1E84:  MOVWF  xC2
1E86:  RCALL  1AF8
1E88:  MOVFF  02,BA
1E8C:  MOVFF  01,B9
1E90:  MOVLW  04
1E92:  ADDWF  xB9,F
1E94:  MOVLW  00
1E96:  ADDWFC xBA,F
1E98:  MOVLW  02
1E9A:  ADDWF  xB9,W
1E9C:  MOVWF  01
1E9E:  MOVLW  00
1EA0:  ADDWFC xBA,W
1EA2:  MOVWF  03
1EA4:  MOVFF  01,FE9
1EA8:  MOVLW  04
1EAA:  ADDWF  03,W
1EAC:  MOVWF  FEA
1EAE:  MOVFF  B4,FEC
1EB2:  MOVF   FED,F
1EB4:  MOVFF  B3,FEF
....................             addy += usb_ep_tx_size[en]; 
1EB8:  BCF    FD8.0
1EBA:  RLCF   xB2,W
1EBC:  CLRF   03
1EBE:  MOVFF  FF2,B9
1EC2:  BCF    FF2.7
1EC4:  RCALL  18EE
1EC6:  TBLRD*+
1EC8:  MOVFF  FF5,03
1ECC:  BTFSC  xB9.7
1ECE:  BSF    FF2.7
1ED0:  ADDWF  xB3,F
1ED2:  MOVF   03,W
1ED4:  ADDWFC xB4,F
....................             EP_BDxST_I(en) = 0x40; 
1ED6:  CLRF   xC1
1ED8:  MOVFF  B2,C0
1EDC:  CLRF   xC3
1EDE:  MOVLW  08
1EE0:  MOVWF  xC2
1EE2:  RCALL  1AF8
1EE4:  MOVFF  02,BA
1EE8:  MOVFF  01,B9
1EEC:  MOVLW  04
1EEE:  ADDWF  xB9,F
1EF0:  MOVLW  00
1EF2:  ADDWFC xBA,F
1EF4:  MOVFF  B9,FE9
1EF8:  MOVLW  04
1EFA:  ADDWF  xBA,W
1EFC:  MOVWF  FEA
1EFE:  MOVLW  40
1F00:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
1F02:  MOVF   xB5,W
1F04:  SUBLW  06
1F06:  BNZ   1F0C
1F08:  MOVLW  0E
1F0A:  MOVWF  xB5
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
1F0C:  CLRF   03
1F0E:  MOVF   xB2,W
1F10:  MOVFF  FF2,B9
1F14:  BCF    FF2.7
1F16:  RCALL  18AE
1F18:  BTFSC  xB9.7
1F1A:  BSF    FF2.7
1F1C:  SUBLW  01
1F1E:  BTFSS  FD8.2
1F20:  BSF    xB5.4
....................           
....................          UEP(en) = new_uep; 
1F22:  CLRF   03
1F24:  MOVF   xB2,W
1F26:  ADDLW  70
1F28:  MOVWF  FE9
1F2A:  MOVLW  0F
1F2C:  ADDWFC 03,W
1F2E:  MOVWF  FEA
1F30:  MOVFF  B5,FEF
....................       } 
1F34:  INCF   xB2,F
1F36:  BRA    1D7A
....................    } 
.................... } 
1F38:  GOTO   1FD2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
1B16:  CLRF   03
1B18:  MOVF   xBA,W
1B1A:  ADDLW  70
1B1C:  MOVWF  FE9
1B1E:  MOVLW  0F
1B20:  ADDWFC 03,W
1B22:  MOVWF  FEA
1B24:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
1B26:  MOVFF  BA,BB
1B2A:  RCALL  1AA0
1B2C:  MOVF   01,F
1B2E:  BZ    1B74
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
1B30:  CLRF   xC1
1B32:  MOVFF  BA,C0
1B36:  CLRF   xC3
1B38:  MOVLW  08
1B3A:  MOVWF  xC2
1B3C:  RCALL  1AF8
1B3E:  MOVFF  01,FE9
1B42:  MOVLW  04
1B44:  ADDWF  02,W
1B46:  MOVWF  FEA
1B48:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
1B4A:  CLRF   xC1
1B4C:  MOVFF  BA,C0
1B50:  CLRF   xC3
1B52:  MOVLW  08
1B54:  MOVWF  xC2
1B56:  RCALL  1AF8
1B58:  MOVFF  02,BC
1B5C:  MOVFF  01,BB
1B60:  MOVLW  04
1B62:  ADDWF  xBB,F
1B64:  MOVLW  00
1B66:  ADDWFC xBC,F
1B68:  MOVFF  BB,FE9
1B6C:  MOVLW  04
1B6E:  ADDWF  xBC,W
1B70:  MOVWF  FEA
1B72:  CLRF   FEF
....................    } 
.................... } 
1B74:  RETLW  00
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
1B76:  MOVLW  01
1B78:  MOVWF  xB9
1B7A:  MOVF   xB9,W
1B7C:  SUBLW  0F
1B7E:  BNC   1B8A
....................       usb_disable_endpoint(i); 
1B80:  MOVFF  B9,BA
1B84:  RCALL  1B16
1B86:  INCF   xB9,F
1B88:  BRA    1B7A
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
1B8A:  RETLW  00
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
1BD8:  BCF    F68.3
.................... } 
1BDA:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
2878:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
287A:  MOVF   1F,F
287C:  BNZ   2880
287E:  BRA    28F2
....................    if (UIR)  
2880:  MOVF   F68,F
2882:  BZ    28F2
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
2884:  BTFSS  F68.2
2886:  BRA    2890
2888:  BTFSS  F69.2
288A:  BRA    2890
288C:  GOTO   1A5A
....................  
....................       if (UCON_SUSPND) return; 
2890:  BTFSS  F6D.1
2892:  BRA    2896
2894:  BRA    28F2
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
2896:  BTFSS  F68.5
2898:  BRA    28A2
289A:  BTFSS  F69.5
289C:  BRA    28A2
289E:  GOTO   1A8A
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
28A2:  BTFSS  F68.1
28A4:  BRA    28AE
28A6:  BTFSS  F69.1
28A8:  BRA    28AE
28AA:  GOTO   1A98
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
28AE:  BTFSS  F68.0
28B0:  BRA    28BA
28B2:  BTFSS  F69.0
28B4:  BRA    28BA
28B6:  GOTO   1BDC
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
28BA:  BTFSS  F68.4
28BC:  BRA    28C6
28BE:  BTFSS  F69.4
28C0:  BRA    28C6
28C2:  GOTO   1C06
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
28C6:  BTFSS  F68.6
28C8:  BRA    28D2
28CA:  BTFSS  F69.6
28CC:  BRA    28D2
28CE:  GOTO   1C10
....................  
....................       TRNAttempts = 0; 
28D2:  CLRF   xAE
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
28D4:  BTFSS  F68.3
28D6:  BRA    28E8
28D8:  BTFSS  F69.3
28DA:  BRA    28E8
....................          { 
....................             USTATCopy = U1STAT; 
28DC:  MOVFF  F6C,1E
....................             usb_clear_trn(); 
28E0:  CALL   1BD8
....................             usb_isr_tok_dne(); 
28E4:  BRA    26EC
....................          } 
....................          else 
28E6:  BRA    28EA
....................             break; 
28E8:  BRA    28F2
....................       } while (TRNAttempts++ < 4); 
28EA:  MOVF   xAE,W
28EC:  INCF   xAE,F
28EE:  SUBLW  03
28F0:  BC    28D4
....................    } 
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
28F2:  GOTO   186C
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
1C10:  BCF    F68.6
.................... } 
1C12:  GOTO   28D2 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
1BDC:  CLRF   F6A
....................    UIR = 0; 
1BDE:  CLRF   F68
....................    UEIE = 0x9F; 
1BE0:  MOVLW  9F
1BE2:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
1BE4:  MOVLW  3D
1BE6:  MOVWF  F69
....................  
....................    UADDR = 0; 
1BE8:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
1BEA:  RCALL  1B76
....................     
....................    usb_token_reset(); 
1BEC:  RCALL  1BB0
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
1BEE:  MOVLW  16
1BF0:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
....................    { 
1BF2:  BTFSS  F68.3
1BF4:  BRA    1BFA
....................       usb_clear_trn(); 
1BF6:  RCALL  1BD8
....................    } 
1BF8:  BRA    1BF2
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
1BFA:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
1BFC:  RCALL  1A6A
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
1BFE:  MOVLW  03
1C00:  MOVWF  1F
.................... } 
1C02:  GOTO   28BA (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
1A6A:  MOVLW  40
1A6C:  MOVLB  4
1A6E:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
1A70:  MOVLW  04
1A72:  MOVWF  x03
1A74:  MOVLW  18
1A76:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
1A78:  MOVLW  88
1A7A:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
1A7C:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
1A7E:  MOVLW  04
1A80:  MOVWF  x07
1A82:  MOVLW  58
1A84:  MOVWF  x06
.................... } 
1A86:  MOVLB  0
1A88:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
1A98:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
1A9A:  BCF    F68.1
.................... } 
1A9C:  GOTO   28AE (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
1C06:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
1C08:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
1C0A:  BSF    F6D.1
.................... } 
1C0C:  GOTO   28C6 (RETURN)
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
1A5A:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
1A5C:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
....................    { 
1A5E:  BTFSS  F68.2
1A60:  BRA    1A66
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
1A62:  BCF    F68.2
....................    } 
1A64:  BRA    1A5E
.................... } 
1A66:  GOTO   2890 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
1A8A:  BTFSS  F70.0
1A8C:  BRA    1A92
....................    { 
....................       usb_init_ep0_setup(); 
1A8E:  RCALL  1A6A
....................       bit_clear(UEP(0), 0); 
1A90:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
1A92:  BCF    F68.5
.................... } 
1A94:  GOTO   28A2 (RETURN)
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
1C16:  MOVFF  B4,20
1C1A:  RETLW  00
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
*
21F6:  MOVLW  FE
21F8:  MOVWF  20
21FA:  RETLW  00
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
*
1C1C:  MOVLW  FF
1C1E:  MOVWF  20
1C20:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
26EC:  RRCF   1E,W
26EE:  MOVWF  xAF
26F0:  RRCF   xAF,F
26F2:  RRCF   xAF,F
26F4:  MOVLW  1F
26F6:  ANDWF  xAF,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
26F8:  MOVF   1E,F
26FA:  BNZ   2780
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
26FC:  MOVLB  4
26FE:  MOVF   x00,W
2700:  ANDLW  3C
2702:  MOVLB  0
2704:  MOVWF  xB0
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
2706:  MOVLW  43
2708:  MOVLB  4
270A:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
270C:  MOVLB  0
270E:  MOVF   xB0,W
2710:  SUBLW  34
2712:  BNZ   2750
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
2714:  MOVLB  4
2716:  MOVF   x04,W
2718:  ANDLW  80
271A:  BZ    271E
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
271C:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
271E:  MOVLB  0
2720:  BRA    22A0
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
2722:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
2724:  INCFSZ 20,W
2726:  BRA    2732
....................             usb_flush_out(0, USB_DTS_STALL); 
2728:  CLRF   xB1
272A:  MOVLW  03
272C:  MOVWF  xB2
272E:  RCALL  22D4
....................          else  
2730:  BRA    274E
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
2732:  CLRF   xB1
2734:  MOVLW  02
2736:  MOVWF  xB2
2738:  RCALL  22D4
....................             if (__setup_0_tx_size != 0xFE) 
273A:  MOVF   20,W
273C:  SUBLW  FE
273E:  BZ    274E
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
2740:  CLRF   xBA
2742:  CLRF   xBC
2744:  MOVFF  20,BB
2748:  MOVLW  04
274A:  MOVWF  xBD
274C:  RCALL  240E
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
....................       else if (pidKey == USB_PIC_PID_OUT)  
274E:  BRA    277E
2750:  MOVF   xB0,W
2752:  SUBLW  04
2754:  BNZ   277E
....................       { 
....................          usb_isr_tok_out_dne(0); 
2756:  CLRF   xB1
2758:  RCALL  25C6
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
275A:  CLRF   xB1
275C:  MOVLW  02
275E:  MOVWF  xB2
2760:  RCALL  22D4
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
2762:  MOVF   20,W
2764:  SUBLW  FE
2766:  BZ    277C
2768:  INCFSZ 20,W
276A:  BRA    276E
276C:  BRA    277C
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
276E:  CLRF   xBA
2770:  CLRF   xBC
2772:  MOVFF  20,BB
2776:  MOVLW  01
2778:  MOVWF  xBD
277A:  RCALL  240E
....................          } 
....................       } 
....................       else 
277C:  BRA    277E
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
....................    else if (USTATCopy == USTAT_IN_E0)  
277E:  BRA    2874
2780:  MOVF   1E,W
2782:  SUBLW  04
2784:  BNZ   27AE
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
2786:  MOVLW  43
2788:  MOVLB  4
278A:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
278C:  MOVLW  FF
278E:  MOVWF  20
....................       usb_isr_tok_in_dne(0); 
2790:  MOVLB  0
2792:  CLRF   xB1
2794:  RCALL  26CA
....................       if (__setup_0_tx_size!=0xFF) 
2796:  INCFSZ 20,W
2798:  BRA    279C
279A:  BRA    27AC
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
279C:  CLRF   xBA
279E:  CLRF   xBC
27A0:  MOVFF  20,BB
27A4:  MOVLW  02
27A6:  MOVWF  xBD
27A8:  RCALL  240E
....................       else 
27AA:  BRA    27AC
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
....................    else  
27AC:  BRA    2874
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
27AE:  BTFSC  1E.2
27B0:  BRA    2806
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
27B2:  CLRF   xC1
27B4:  MOVFF  AF,C0
27B8:  CLRF   xC3
27BA:  MOVLW  08
27BC:  MOVWF  xC2
27BE:  CALL   1AF8
27C2:  MOVFF  01,B1
27C6:  MOVFF  01,01
27CA:  MOVLW  04
27CC:  ADDWF  02,W
27CE:  MOVWF  03
27D0:  MOVFF  01,B1
27D4:  MOVWF  xB2
27D6:  CLRF   xC1
27D8:  MOVFF  AF,C0
27DC:  CLRF   xC3
27DE:  MOVLW  08
27E0:  MOVWF  xC2
27E2:  CALL   1AF8
27E6:  MOVFF  01,FE9
27EA:  MOVLW  04
27EC:  ADDWF  02,W
27EE:  MOVWF  FEA
27F0:  MOVF   FEF,W
27F2:  ANDLW  43
27F4:  MOVFF  B2,FEA
27F8:  MOVFF  B1,FE9
27FC:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
27FE:  MOVFF  AF,B1
2802:  RCALL  25C6
....................       } 
....................       else  
2804:  BRA    2874
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
2806:  CLRF   xC1
2808:  MOVFF  AF,C0
280C:  CLRF   xC3
280E:  MOVLW  08
2810:  MOVWF  xC2
2812:  CALL   1AF8
2816:  MOVFF  02,B2
281A:  MOVFF  01,B1
281E:  MOVLW  04
2820:  ADDWF  xB1,F
2822:  MOVLW  00
2824:  ADDWFC xB2,F
2826:  MOVFF  B1,01
282A:  MOVLW  04
282C:  ADDWF  xB2,W
282E:  MOVWF  03
2830:  MOVFF  B1,B1
2834:  MOVWF  xB2
2836:  CLRF   xC1
2838:  MOVFF  AF,C0
283C:  CLRF   xC3
283E:  MOVLW  08
2840:  MOVWF  xC2
2842:  CALL   1AF8
2846:  MOVFF  02,B4
284A:  MOVFF  01,B3
284E:  MOVLW  04
2850:  ADDWF  xB3,F
2852:  MOVLW  00
2854:  ADDWFC xB4,F
2856:  MOVFF  B3,FE9
285A:  MOVLW  04
285C:  ADDWF  xB4,W
285E:  MOVWF  FEA
2860:  MOVF   FEF,W
2862:  ANDLW  43
2864:  MOVFF  B2,FEA
2868:  MOVFF  B1,FE9
286C:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
286E:  MOVFF  AF,B1
2872:  RCALL  26CA
....................       } 
....................    } 
.................... } 
2874:  GOTO   28E6 (RETURN)
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
1BB0:  CLRF   xAF
1BB2:  MOVF   xAF,W
1BB4:  SUBLW  01
1BB6:  BNC   1BCC
....................       USB_Interface[i] = 0;   //reset each interface to default 
1BB8:  CLRF   03
1BBA:  MOVF   xAF,W
1BBC:  ADDLW  26
1BBE:  MOVWF  FE9
1BC0:  MOVLW  00
1BC2:  ADDWFC 03,W
1BC4:  MOVWF  FEA
1BC6:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
1BC8:  INCF   xAF,F
1BCA:  BRA    1BB2
....................    usb_cdc_init(); 
1BCC:  RCALL  1B8C
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
1BCE:  CLRF   18
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
1BD0:  MOVLW  01
1BD2:  MOVWF  19
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
1BD4:  CLRF   17
.................... } 
1BD6:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
1AA0:  BCF    xBC.0
1AA2:  BTFSC  xBB.7
1AA4:  BSF    xBC.0
....................     
....................    endpoint &= 0x7F; 
1AA6:  BCF    xBB.7
....................     
....................    if (endpoint > 16) 
1AA8:  MOVF   xBB,W
1AAA:  SUBLW  10
1AAC:  BC    1AB4
....................       return(FALSE); 
1AAE:  MOVLW  00
1AB0:  MOVWF  01
1AB2:  BRA    1AF6
....................     
....................    if (direction) { //IN 
1AB4:  BTFSS  xBC.0
1AB6:  BRA    1AD8
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
1AB8:  CLRF   03
1ABA:  MOVF   xBB,W
1ABC:  MOVFF  FF2,BD
1AC0:  BCF    FF2.7
1AC2:  RCALL  18AE
1AC4:  BTFSC  xBD.7
1AC6:  BSF    FF2.7
1AC8:  SUBLW  FF
1ACA:  BNZ   1AD0
1ACC:  MOVLW  00
1ACE:  BRA    1AD2
1AD0:  MOVLW  01
1AD2:  MOVWF  01
1AD4:  BRA    1AF6
....................    } 
....................    else {   //OUT 
1AD6:  BRA    1AF6
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
1AD8:  CLRF   03
1ADA:  MOVF   xBB,W
1ADC:  MOVFF  FF2,BD
1AE0:  BCF    FF2.7
1AE2:  RCALL  18CE
1AE4:  BTFSC  xBD.7
1AE6:  BSF    FF2.7
1AE8:  SUBLW  FF
1AEA:  BNZ   1AF0
1AEC:  MOVLW  00
1AEE:  BRA    1AF2
1AF0:  MOVLW  01
1AF2:  MOVWF  01
1AF4:  BRA    1AF6
....................    } 
.................... } 
1AF6:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
26CA:  MOVF   xB1,F
26CC:  BNZ   26E2
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
26CE:  DECFSZ 17,W
26D0:  BRA    26D8
26D2:  CALL   1C22
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
26D6:  BRA    26E0
26D8:  MOVF   17,W
26DA:  SUBLW  02
26DC:  BNZ   26E0
26DE:  BRA    25EE
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
26E0:  BRA    26EA
26E2:  MOVF   xB1,W
26E4:  SUBLW  02
26E6:  BNZ   26EA
....................       usb_isr_tok_in_cdc_data_dne(); 
26E8:  BRA    26BC
....................   } 
....................   #endif 
.................... } 
26EA:  RETLW  00
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
25C6:  MOVF   xB1,F
25C8:  BNZ   25CE
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
25CA:  BRA    2518
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
25CC:  BRA    25D6
25CE:  MOVF   xB1,W
25D0:  SUBLW  02
25D2:  BNZ   25D6
....................       usb_isr_tok_out_cdc_data_dne(); 
25D4:  BRA    25B4
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
25D6:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
22A0:  CLRF   17
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
22A2:  MOVLB  4
22A4:  MOVF   x18,W
22A6:  ANDLW  7F
22A8:  XORLW  00
22AA:  MOVLB  0
22AC:  BZ    22BC
22AE:  XORLW  01
22B0:  BZ    22C0
22B2:  XORLW  03
22B4:  BZ    22C4
22B6:  XORLW  23
22B8:  BZ    22C8
22BA:  BRA    22CC
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
22BC:  BRA    1F3C
....................          break; 
22BE:  BRA    22D0
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
22C0:  BRA    1FE2
....................          break; 
22C2:  BRA    22D0
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
22C4:  BRA    2196
....................          break; 
22C6:  BRA    22D0
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
22C8:  BRA    21FC
....................          break; 
22CA:  BRA    22D0
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
22CC:  RCALL  1C1C
....................          break; 
22CE:  BRA    22D0
....................    } 
.................... } 
22D0:  GOTO   2722 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
1F3C:  MOVLB  4
1F3E:  MOVF   x19,W
1F40:  XORLW  00
1F42:  MOVLB  0
1F44:  BZ    1F60
1F46:  XORLW  01
1F48:  BZ    1F72
1F4A:  XORLW  02
1F4C:  BZ    1F8A
1F4E:  XORLW  06
1F50:  BZ    1FA0
1F52:  XORLW  03
1F54:  BZ    1FAE
1F56:  XORLW  0E
1F58:  BZ    1FB2
1F5A:  XORLW  01
1F5C:  BZ    1FBE
1F5E:  BRA    1FDA
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
1F60:  MOVFF  19,458
....................             usb_ep0_tx_buffer[1]=0; 
1F64:  MOVLB  4
1F66:  CLRF   x59
....................             usb_request_send_response(2); 
1F68:  MOVLW  02
1F6A:  MOVLB  0
1F6C:  MOVWF  xB4
1F6E:  RCALL  1C16
....................             break; 
1F70:  BRA    1FDE
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1F72:  MOVLB  4
1F74:  DECFSZ x1A,W
1F76:  BRA    1F84
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
1F78:  MOVLW  01
1F7A:  ANDWF  19,F
....................                usb_put_0len_0(); 
1F7C:  MOVLB  0
1F7E:  CLRF   xB4
1F80:  RCALL  1C16
....................             } 
....................             else 
1F82:  BRA    1F88
....................                usb_request_stall(); 
1F84:  MOVLB  0
1F86:  RCALL  1C1C
....................             break; 
1F88:  BRA    1FDE
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
1F8A:  MOVLB  4
1F8C:  DECFSZ x1A,W
1F8E:  BRA    1F9A
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
1F90:  BSF    19.1
....................                usb_put_0len_0(); 
1F92:  MOVLB  0
1F94:  CLRF   xB4
1F96:  RCALL  1C16
....................             } 
....................             else 
1F98:  BRA    1F9E
....................                usb_request_stall(); 
1F9A:  MOVLB  0
1F9C:  RCALL  1C1C
....................             break; 
1F9E:  BRA    1FDE
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
1FA0:  MOVLW  02
1FA2:  MOVWF  17
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
1FA4:  MOVFF  41A,21
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
1FA8:  CLRF   xB4
1FAA:  RCALL  1C16
....................             break; 
1FAC:  BRA    1FDE
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
1FAE:  BRA    1CA6
....................             break; 
1FB0:  BRA    1FDE
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
1FB2:  MOVFF  18,458
....................             usb_request_send_response(1); 
1FB6:  MOVLW  01
1FB8:  MOVWF  xB4
1FBA:  RCALL  1C16
....................             break; 
1FBC:  BRA    1FDE
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
1FBE:  MOVLB  4
1FC0:  MOVF   x1A,W
1FC2:  SUBLW  01
1FC4:  BNC   1FD6
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
1FC6:  MOVFF  41A,18
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
1FCA:  MOVFF  41A,B1
1FCE:  MOVLB  0
1FD0:  BRA    1D5E
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
1FD2:  CLRF   xB4
1FD4:  RCALL  1C16
....................             } 
....................             break; 
1FD6:  MOVLB  0
1FD8:  BRA    1FDE
....................  
....................       default: 
....................             usb_request_stall(); 
1FDA:  RCALL  1C1C
....................             break; 
1FDC:  BRA    1FDE
....................    } 
.................... } 
1FDE:  GOTO   22D0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
1FE2:  MOVFF  18,B1
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
1FE6:  MOVLB  4
1FE8:  MOVF   x19,W
1FEA:  XORLW  00
1FEC:  MOVLB  0
1FEE:  BZ    1FFA
1FF0:  XORLW  0A
1FF2:  BZ    200A
1FF4:  XORLW  01
1FF6:  BZ    204E
1FF8:  BRA    2072
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
1FFA:  MOVLB  4
1FFC:  CLRF   x58
....................             usb_ep0_tx_buffer[1]=0; 
1FFE:  CLRF   x59
....................             usb_request_send_response(2); 
2000:  MOVLW  02
2002:  MOVLB  0
2004:  MOVWF  xB4
2006:  RCALL  1C16
....................             break; 
2008:  BRA    2076
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
200A:  MOVF   xB1,F
200C:  BZ    204A
200E:  MOVLW  01
2010:  SUBWF  xB1,W
2012:  CLRF   03
2014:  MOVFF  FF2,B2
2018:  BCF    FF2.7
201A:  RCALL  19A2
201C:  BTFSC  xB2.7
201E:  BSF    FF2.7
2020:  MOVWF  01
2022:  MOVLB  4
2024:  SUBWF  x1C,W
2026:  BTFSS  FD8.0
2028:  BRA    202E
202A:  MOVLB  0
202C:  BRA    204A
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
202E:  CLRF   03
2030:  MOVF   x1C,W
2032:  ADDLW  26
2034:  MOVWF  FE9
2036:  MOVLW  00
2038:  ADDWFC 03,W
203A:  MOVWF  FEA
203C:  MOVFF  FEF,458
....................                usb_request_send_response(1);; //send byte back 
2040:  MOVLW  01
2042:  MOVLB  0
2044:  MOVWF  xB4
2046:  RCALL  1C16
....................             } 
....................             else 
2048:  BRA    204C
....................                usb_request_stall(); 
204A:  RCALL  1C1C
....................             break; 
204C:  BRA    2076
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
204E:  MOVF   xB1,F
2050:  BZ    206E
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
2052:  CLRF   03
2054:  MOVLB  4
2056:  MOVF   x1C,W
2058:  ADDLW  26
205A:  MOVWF  FE9
205C:  MOVLW  00
205E:  ADDWFC 03,W
2060:  MOVWF  FEA
2062:  MOVFF  41A,FEF
....................                usb_put_0len_0(); 
2066:  MOVLB  0
2068:  CLRF   xB4
206A:  RCALL  1C16
....................             } 
....................             else 
206C:  BRA    2070
....................                usb_request_stall(); 
206E:  RCALL  1C1C
....................             break; 
2070:  BRA    2076
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
2072:  RCALL  1C1C
....................             break; 
2074:  BRA    2076
....................    } 
.................... } 
2076:  GOTO   22D0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
2196:  MOVFF  41C,BB
219A:  RCALL  1AA0
219C:  MOVF   01,F
219E:  BZ    21F2
....................       switch(usb_ep0_rx_buffer[1]) { 
21A0:  MOVLB  4
21A2:  MOVF   x19,W
21A4:  XORLW  01
21A6:  MOVLB  0
21A8:  BZ    21B4
21AA:  XORLW  02
21AC:  BZ    21C0
21AE:  XORLW  03
21B0:  BZ    21CC
21B2:  BRA    21EE
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
21B4:  MOVFF  41C,B1
21B8:  BRA    207A
....................                usb_put_0len_0(); 
21BA:  CLRF   xB4
21BC:  RCALL  1C16
....................                break; 
21BE:  BRA    21F2
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
21C0:  MOVFF  41C,B1
21C4:  BRA    20D2
....................                      usb_put_0len_0(); 
21C6:  CLRF   xB4
21C8:  RCALL  1C16
....................                      break; 
21CA:  BRA    21F2
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
21CC:  MOVLB  4
21CE:  CLRF   x58
....................                usb_ep0_tx_buffer[1]=0; 
21D0:  CLRF   x59
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
21D2:  MOVFF  41C,B1
21D6:  MOVLB  0
21D8:  BRA    212C
21DA:  MOVF   01,F
21DC:  BZ    21E6
....................                   usb_ep0_tx_buffer[0]=1; 
21DE:  MOVLW  01
21E0:  MOVLB  4
21E2:  MOVWF  x58
21E4:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
21E6:  MOVLW  02
21E8:  MOVWF  xB4
21EA:  RCALL  1C16
....................                break; 
21EC:  BRA    21F2
....................  
....................          default: 
....................             usb_request_stall(); 
21EE:  RCALL  1C1C
....................             break; 
21F0:  BRA    21F2
....................       } 
....................    } 
.................... } 
21F2:  GOTO   22D0 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
1CA6:  CLRF   22
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
1CA8:  CLRF   1A
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
1CAA:  MOVLB  4
1CAC:  MOVF   x1B,W
1CAE:  XORLW  01
1CB0:  MOVLB  0
1CB2:  BZ    1CC2
1CB4:  XORLW  03
1CB6:  BZ    1CCC
1CB8:  XORLW  01
1CBA:  BZ    1CD2
1CBC:  XORLW  22
1CBE:  BZ    1D00
1CC0:  BRA    1D3E
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
1CC2:  MOVLW  12
1CC4:  MOVWF  23
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
1CC6:  MOVLW  03
1CC8:  MOVWF  1A
....................             break; 
1CCA:  BRA    1D42
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
1CCC:  MOVLW  43
1CCE:  MOVWF  23
....................             break; 
1CD0:  BRA    1D42
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
1CD2:  MOVLW  02
1CD4:  MOVWF  1A
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
1CD6:  CLRF   03
1CD8:  MOVLB  4
1CDA:  MOVF   x1A,W
1CDC:  ADDLW  1B
1CDE:  MOVWF  FE9
1CE0:  MOVLW  00
1CE2:  ADDWFC 03,W
1CE4:  MOVWF  FEA
1CE6:  MOVFF  FEF,22
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
1CEA:  CLRF   03
1CEC:  MOVF   22,W
1CEE:  MOVFF  FF2,B1
1CF2:  BCF    FF2.7
1CF4:  MOVLB  0
1CF6:  RCALL  19F6
1CF8:  BTFSC  xB1.7
1CFA:  BSF    FF2.7
1CFC:  MOVWF  23
....................             break; 
1CFE:  BRA    1D42
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
1D00:  BCF    FD8.0
1D02:  MOVLB  4
1D04:  RLCF   x1A,W
1D06:  CLRF   03
1D08:  MOVFF  FF2,B1
1D0C:  BCF    FF2.7
1D0E:  MOVLB  0
1D10:  RCALL  19B4
1D12:  TBLRD*+
1D14:  MOVFF  FF5,03
1D18:  BTFSC  xB1.7
1D1A:  BSF    FF2.7
1D1C:  MOVWF  22
....................             if (usb_getdesc_ptr!=0xFF) { 
1D1E:  INCFSZ 22,W
1D20:  BRA    1D24
1D22:  BRA    1D3A
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
1D24:  CLRF   03
1D26:  MOVF   22,W
1D28:  MOVFF  FF2,B1
1D2C:  BCF    FF2.7
1D2E:  RCALL  194E
1D30:  BTFSC  xB1.7
1D32:  BSF    FF2.7
1D34:  MOVWF  23
....................                break; 
1D36:  BRA    1D42
....................             } 
....................             else { 
1D38:  BRA    1D3E
....................                usb_request_stall(); 
1D3A:  RCALL  1C1C
....................                return; 
1D3C:  BRA    1D5A
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
1D3E:  RCALL  1C1C
....................             return; 
1D40:  BRA    1D5A
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
1D42:  MOVLB  4
1D44:  MOVF   x1F,F
1D46:  BNZ   1D52
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
1D48:  MOVF   23,W
1D4A:  SUBWF  x1E,W
1D4C:  BC    1D52
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
1D4E:  MOVFF  41E,23
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
1D52:  MOVLW  01
1D54:  MOVWF  17
....................    usb_copy_desc_seg_to_ep(); 
1D56:  MOVLB  0
1D58:  RCALL  1C22
.................... } 
1D5A:  GOTO   1FDE (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
25EE:  CLRF   18
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
25F0:  CLRF   17
....................    usb_set_address(USB_address_pending); 
25F2:  MOVFF  21,B2
25F6:  BRA    25D8
....................    #endif 
.................... } 
25F8:  GOTO   26E0 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
1C22:  CLRF   xB2
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
1C24:  MOVF   23,F
1C26:  BZ    1C92
1C28:  MOVF   xB2,W
1C2A:  SUBLW  3F
1C2C:  BNC   1C92
....................       switch(USB_stack_status.getdesc_type) { 
1C2E:  MOVF   1A,W
1C30:  BZ    1C3C
1C32:  XORLW  02
1C34:  BZ    1C50
1C36:  XORLW  01
1C38:  BZ    1C64
1C3A:  BRA    1C78
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
1C3C:  CLRF   03
1C3E:  MOVF   22,W
1C40:  MOVFF  FF2,B4
1C44:  BCF    FF2.7
1C46:  RCALL  194E
1C48:  BTFSC  xB4.7
1C4A:  BSF    FF2.7
1C4C:  MOVWF  xB3
....................             break; 
1C4E:  BRA    1C78
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
1C50:  CLRF   03
1C52:  MOVF   22,W
1C54:  MOVFF  FF2,B4
1C58:  BCF    FF2.7
1C5A:  RCALL  19F6
1C5C:  BTFSC  xB4.7
1C5E:  BSF    FF2.7
1C60:  MOVWF  xB3
....................             break; 
1C62:  BRA    1C78
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
1C64:  CLRF   03
1C66:  MOVF   22,W
1C68:  MOVFF  FF2,B4
1C6C:  BCF    FF2.7
1C6E:  RCALL  19D4
1C70:  BTFSC  xB4.7
1C72:  BSF    FF2.7
1C74:  MOVWF  xB3
....................             break; 
1C76:  BRA    1C78
....................       } 
....................       usb_getdesc_ptr++; 
1C78:  INCF   22,F
....................       usb_getdesc_len--; 
1C7A:  DECF   23,F
....................       usb_ep0_tx_buffer[i++]=c; 
1C7C:  MOVF   xB2,W
1C7E:  INCF   xB2,F
1C80:  ADDLW  58
1C82:  MOVWF  FE9
1C84:  MOVLW  04
1C86:  MOVWF  FEA
1C88:  BTFSC  FD8.0
1C8A:  INCF   FEA,F
1C8C:  MOVFF  B3,FEF
....................    } 
1C90:  BRA    1C24
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
1C92:  MOVF   23,F
1C94:  BNZ   1C9E
1C96:  MOVF   xB2,W
1C98:  SUBLW  40
1C9A:  BZ    1C9E
....................          USB_stack_status.dev_req = NONE; 
1C9C:  CLRF   17
....................    } 
....................  
....................    usb_request_send_response(i); 
1C9E:  MOVFF  B2,B4
1CA2:  RCALL  1C16
.................... } 
1CA4:  RETLW  00
....................  
.................... #ENDIF 
....................  
....................  
.................... struct { 
....................         int32   dwDTERrate;   //data terminal rate, in bits per second 
....................         int8    bCharFormat;  //num of stop bits (0=1, 1=1.5, 2=2) 
....................         int8    bParityType;  //parity (0=none, 1=odd, 2=even, 3=mark, 4=space) 
....................         int8    bDataBits;    //data bits (5,6,7,8 or 16) 
.................... } usb_cdc_line_coding; 
....................  
.................... //length of time, in ms, of break signal as we received in a SendBreak message. 
.................... //if ==0xFFFF, send break signal until we receive a 0x0000. 
.................... int16 usb_cdc_break; 
....................  
.................... int8 usb_cdc_encapsulated_cmd[8]; 
....................  
.................... int8 usb_cdc_put_buffer[USB_CDC_DATA_IN_SIZE]; 
.................... int1 usb_cdc_put_buffer_free; 
.................... #if USB_CDC_DATA_IN_SIZE>=0x100 
....................  int16 usb_cdc_put_buffer_nextin=0; 
.................... // int16 usb_cdc_last_data_packet_size; 
.................... #else 
....................  int8 usb_cdc_put_buffer_nextin=0; 
.................... // int8 usb_cdc_last_data_packet_size; 
.................... #endif 
....................  
.................... struct { 
....................    int1 got; 
....................   #if USB_CDC_DATA_OUT_SIZE>=0x100 
....................    int16 len; 
....................    int16 index; 
....................   #else 
....................    int8 len; 
....................    int8 index; 
....................   #endif 
.................... } usb_cdc_get_buffer_status; 
....................  
.................... int8 usb_cdc_get_buffer_status_buffer[USB_CDC_DATA_OUT_SIZE]; 
.................... #if (defined(__PIC__)) 
....................  #if __PIC__ 
....................   //#locate usb_cdc_get_buffer_status_buffer=0x500+(2*USB_MAX_EP0_PACKET_LENGTH)+USB_CDC_COMM_IN_SIZE 
....................   #if USB_MAX_EP0_PACKET_LENGTH==8 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+24 
....................   #elif USB_MAX_EP0_PACKET_LENGTH==64 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+136 
....................   #else 
....................    #error CCS BUG WONT LET ME USE MATH IN LOCATE 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... int1 usb_cdc_got_set_line_coding; 
....................  
.................... struct  { 
....................    int1 dte_present; //1=DTE present, 0=DTE not present 
....................    int1 active;      //1=activate carrier, 0=deactivate carrier 
....................    int reserved:6; 
.................... } usb_cdc_carrier; 
....................  
.................... enum {USB_CDC_OUT_NOTHING=0, USB_CDC_OUT_COMMAND=1, USB_CDC_OUT_LINECODING=2, USB_CDC_WAIT_0LEN=3} __usb_cdc_state=0; 
....................  
.................... #byte INTCON=0xFF2 
.................... #bit INT_GIE=INTCON.7 
....................  
.................... //handle OUT token done interrupt on endpoint 0 [read encapsulated cmd and line coding data] 
.................... void usb_isr_tok_out_cdc_control_dne(void) { 
....................    debug_usb(debug_putc,"CDC %X ",__usb_cdc_state); 
....................  
....................    switch (__usb_cdc_state) { 
*
2518:  MOVF   x7E,W
251A:  XORLW  01
251C:  BZ    2524
251E:  XORLW  03
2520:  BZ    2548
2522:  BRA    256C
....................       //printf(putc_tbe,"@%X@\r\n", __usb_cdc_state); 
....................       case USB_CDC_OUT_COMMAND: 
....................          //usb_get_packet(0, usb_cdc_encapsulated_cmd, 8); 
....................          memcpy(usb_cdc_encapsulated_cmd, usb_ep0_rx_buffer,8); 
2524:  CLRF   FEA
2526:  MOVLW  31
2528:  MOVWF  FE9
252A:  MOVLW  04
252C:  MOVWF  FE2
252E:  MOVLW  18
2530:  MOVWF  FE1
2532:  MOVLW  08
2534:  MOVWF  01
2536:  MOVFF  FE6,FEE
253A:  DECFSZ 01,F
253C:  BRA    2536
....................         #if USB_MAX_EP0_PACKET_LENGTH==8 
....................          __usb_cdc_state=USB_CDC_WAIT_0LEN; 
....................          usb_request_get_data(); 
....................         #else 
....................          usb_put_0len_0(); 
253E:  CLRF   xB4
2540:  CALL   1C16
....................          __usb_cdc_state=0; 
2544:  CLRF   x7E
....................         #endif 
....................          break; 
2546:  BRA    2574
....................  
....................     #if USB_MAX_EP0_PACKET_LENGTH==8 
....................       case USB_CDC_WAIT_0LEN: 
....................          usb_put_0len_0(); 
....................          __usb_cdc_state=0; 
....................          break; 
....................     #endif 
....................  
....................       case USB_CDC_OUT_LINECODING: 
....................          //usb_get_packet(0, &usb_cdc_line_coding, 7); 
....................          //printf(putc_tbe,"\r\n!GSLC FIN!\r\n"); 
....................          memcpy(&usb_cdc_line_coding, usb_ep0_rx_buffer,7); 
2548:  CLRF   FEA
254A:  MOVLW  28
254C:  MOVWF  FE9
254E:  MOVLW  04
2550:  MOVWF  FE2
2552:  MOVLW  18
2554:  MOVWF  FE1
2556:  MOVLW  07
2558:  MOVWF  01
255A:  MOVFF  FE6,FEE
255E:  DECFSZ 01,F
2560:  BRA    255A
....................          __usb_cdc_state=0; 
2562:  CLRF   x7E
....................          usb_put_0len_0(); 
2564:  CLRF   xB4
2566:  CALL   1C16
....................          break; 
256A:  BRA    2574
....................  
....................       default: 
....................          __usb_cdc_state=0; 
256C:  CLRF   x7E
....................          usb_init_ep0_setup(); 
256E:  CALL   1A6A
....................          break; 
2572:  BRA    2574
....................    } 
.................... } 
2574:  GOTO   25CC (RETURN)
....................  
.................... //handle IN token on 0 (setup packet) 
.................... void usb_isr_tkn_cdc(void) { 
....................    //make sure the request goes to a CDC interface 
....................    if ((usb_ep0_rx_buffer[4] == 1) || (usb_ep0_rx_buffer[4] == 0)) { 
*
21FC:  MOVLB  4
21FE:  DECFSZ x1C,W
2200:  BRA    2204
2202:  BRA    2208
2204:  MOVF   x1C,F
2206:  BNZ   229A
....................       //printf(putc_tbe,"!%X!\r\n", usb_ep0_rx_buffer[1]); 
....................       switch(usb_ep0_rx_buffer[1]) { 
2208:  MOVF   x19,W
220A:  XORLW  00
220C:  MOVLB  0
220E:  BZ    2226
2210:  XORLW  01
2212:  BZ    222E
2214:  XORLW  21
2216:  BZ    2250
2218:  XORLW  01
221A:  BZ    225A
221C:  XORLW  03
221E:  BZ    227C
2220:  XORLW  01
2222:  BZ    2286
2224:  BRA    2294
....................          case 0x00:  //send_encapsulated_command 
....................             __usb_cdc_state=USB_CDC_OUT_COMMAND; 
2226:  MOVLW  01
2228:  MOVWF  x7E
....................             usb_request_get_data(); 
222A:  RCALL  21F6
....................             break; 
222C:  BRA    2298
....................  
....................          case 0x01:  //get_encapsulated_command 
....................             memcpy(usb_ep0_tx_buffer, usb_cdc_encapsulated_cmd, 8); 
222E:  MOVLW  04
2230:  MOVWF  FEA
2232:  MOVLW  58
2234:  MOVWF  FE9
2236:  CLRF   FE2
2238:  MOVLW  31
223A:  MOVWF  FE1
223C:  MOVLW  08
223E:  MOVWF  01
2240:  MOVFF  FE6,FEE
2244:  DECFSZ 01,F
2246:  BRA    2240
....................             usb_request_send_response(usb_ep0_rx_buffer[6]);  //send wLength bytes 
2248:  MOVFF  41E,B4
224C:  RCALL  1C16
....................             break; 
224E:  BRA    2298
....................  
....................          case 0x20:  //set_line_coding 
....................             debug_usb(debug_putc,"!GSLC!"); 
....................             __usb_cdc_state=USB_CDC_OUT_LINECODING; 
2250:  MOVLW  02
2252:  MOVWF  x7E
....................             usb_cdc_got_set_line_coding=TRUE; 
2254:  BSF    24.1
....................             usb_request_get_data(); 
2256:  RCALL  21F6
....................             break; 
2258:  BRA    2298
....................  
....................          case 0x21:  //get_line_coding 
....................             memcpy(usb_ep0_tx_buffer, &usb_cdc_line_coding, sizeof(usb_cdc_line_coding)); 
225A:  MOVLW  04
225C:  MOVWF  FEA
225E:  MOVLW  58
2260:  MOVWF  FE9
2262:  CLRF   FE2
2264:  MOVLW  28
2266:  MOVWF  FE1
2268:  MOVLW  07
226A:  MOVWF  01
226C:  MOVFF  FE6,FEE
2270:  DECFSZ 01,F
2272:  BRA    226C
....................             usb_request_send_response(sizeof(usb_cdc_line_coding)); //send wLength bytes 
2274:  MOVLW  07
2276:  MOVWF  xB4
2278:  RCALL  1C16
....................             break; 
227A:  BRA    2298
....................  
....................          case 0x22:  //set_control_line_state 
....................             usb_cdc_carrier=usb_ep0_rx_buffer[2]; 
227C:  MOVFF  41A,7D
....................             usb_put_0len_0(); 
2280:  CLRF   xB4
2282:  RCALL  1C16
....................             break; 
2284:  BRA    2298
....................  
....................          case 0x23:  //send_break 
....................             usb_cdc_break=make16(usb_ep0_rx_buffer[2],usb_ep0_rx_buffer[3]); 
2286:  MOVFF  41A,30
228A:  MOVFF  41B,2F
....................             usb_put_0len_0(); 
228E:  CLRF   xB4
2290:  RCALL  1C16
....................             break; 
2292:  BRA    2298
....................  
....................          default: 
....................             usb_request_stall(); 
2294:  RCALL  1C1C
....................             break; 
2296:  BRA    2298
2298:  MOVLB  4
....................       } 
....................    } 
.................... } 
229A:  MOVLB  0
229C:  GOTO   22D0 (RETURN)
....................  
.................... //handle OUT token done interrupt on endpoint 3 [buffer incoming received chars] 
.................... void usb_isr_tok_out_cdc_data_dne(void) { 
....................    usb_cdc_get_buffer_status.got=TRUE; 
*
25B4:  BSF    x7A.0
....................    usb_cdc_get_buffer_status.index=0; 
25B6:  CLRF   x7C
.................... #if (defined(__PIC__)) 
....................    #if __PIC__ 
....................     usb_cdc_get_buffer_status.len=usb_rx_packet_size(USB_CDC_DATA_OUT_ENDPOINT); 
25B8:  MOVLW  02
25BA:  MOVWF  xB2
25BC:  BRA    2578
25BE:  MOVFF  01,7B
....................    #else 
....................     usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................        USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
....................    #endif 
.................... #else 
....................    usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................       USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
.................... #endif 
.................... } 
25C2:  GOTO   25D6 (RETURN)
....................  
.................... //handle IN token done interrupt on endpoint 2 [transmit buffered characters] 
.................... void usb_isr_tok_in_cdc_data_dne(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
26BC:  MOVF   x79,F
26BE:  BZ    26C4
....................       usb_cdc_flush_out_buffer(); 
26C0:  BRA    269A
....................    } 
....................    //send a 0len packet if needed 
.................... //   else if (usb_cdc_last_data_packet_size==USB_CDC_DATA_IN_SIZE) { 
.................... //      usb_cdc_last_data_packet_size=0; 
.................... //      printf(putc_tbe, "FL 0\r\n"); 
.................... //      usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,0,0,USB_DTS_TOGGLE); 
.................... //   } 
....................    else { 
26C2:  BRA    26C6
....................       usb_cdc_put_buffer_free=TRUE; 
26C4:  BSF    24.0
....................       //printf(putc_tbe, "FL DONE\r\n"); 
....................    } 
.................... } 
26C6:  GOTO   26EA (RETURN)
....................  
.................... void usb_cdc_flush_out_buffer(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
269A:  MOVF   x79,F
269C:  BZ    26B8
....................       usb_cdc_put_buffer_free=FALSE; 
269E:  BCF    24.0
....................       //usb_cdc_last_data_packet_size=usb_cdc_put_buffer_nextin; 
....................       //printf(putc_tbe, "FL %U\r\n", usb_cdc_put_buffer_nextin); 
....................       usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,usb_cdc_put_buffer,usb_cdc_put_buffer_nextin,USB_DTS_TOGGLE); 
26A0:  MOVLW  02
26A2:  MOVWF  xB2
26A4:  CLRF   xB4
26A6:  MOVLW  39
26A8:  MOVWF  xB3
26AA:  CLRF   xB6
26AC:  MOVFF  79,B5
26B0:  MOVLW  02
26B2:  MOVWF  xB7
26B4:  BRA    25FC
....................       usb_cdc_put_buffer_nextin=0; 
26B6:  CLRF   x79
....................    } 
.................... } 
26B8:  GOTO   26C2 (RETURN)
....................  
.................... void usb_cdc_init(void) { 
....................    usb_cdc_line_coding.dwDTERrate=9600; 
*
1B8C:  CLRF   2B
1B8E:  CLRF   2A
1B90:  MOVLW  25
1B92:  MOVWF  29
1B94:  MOVLW  80
1B96:  MOVWF  28
....................    usb_cdc_line_coding.bCharFormat=0; 
1B98:  CLRF   2C
....................    usb_cdc_line_coding.bParityType=0; 
1B9A:  CLRF   2D
....................    usb_cdc_line_coding.bDataBits=8; 
1B9C:  MOVLW  08
1B9E:  MOVWF  2E
....................    (int8)usb_cdc_carrier=0; 
1BA0:  CLRF   x7D
....................    usb_cdc_got_set_line_coding=FALSE; 
1BA2:  BCF    24.1
....................    usb_cdc_break=0; 
1BA4:  CLRF   30
1BA6:  CLRF   2F
....................    usb_cdc_put_buffer_nextin=0; 
1BA8:  CLRF   x79
....................    usb_cdc_get_buffer_status.got=0; 
1BAA:  BCF    x7A.0
....................    usb_cdc_put_buffer_free=TRUE; 
1BAC:  BSF    24.0
.................... } 
1BAE:  RETLW  00
....................  
.................... ////////////////// END USB CONTROL HANDLING ////////////////////////////////// 
....................  
.................... ////////////////// BEGIN USB<->RS232 CDC LIBRARY ///////////////////////////// 
....................  
.................... char usb_cdc_getc(void) { 
....................    char c; 
....................  
....................    while (!usb_cdc_kbhit()) {} 
....................  
....................    c=usb_cdc_get_buffer_status_buffer[usb_cdc_get_buffer_status.index++]; 
....................    if (usb_cdc_get_buffer_status.index >= usb_cdc_get_buffer_status.len) { 
....................       usb_cdc_get_buffer_status.got=FALSE; 
....................       usb_flush_out(USB_CDC_DATA_OUT_ENDPOINT, USB_DTS_TOGGLE); 
....................    } 
....................  
....................    return(c); 
.................... } 
....................  
.................... void usb_cdc_putc_fast(char c) { 
....................    int1 old_gie; 
....................  
....................    //disable global interrupts 
....................    old_gie=INT_GIE; 
....................    INT_GIE=0; 
....................  
....................    if (usb_cdc_put_buffer_nextin >= USB_CDC_DATA_IN_SIZE) { 
....................       usb_cdc_put_buffer_nextin=USB_CDC_DATA_IN_SIZE-1;  //we just overflowed the buffer! 
....................    } 
....................    usb_cdc_put_buffer[usb_cdc_put_buffer_nextin++]=c; 
....................  
....................    //renable global interrupts 
....................    INT_GIE=old_gie; 
....................  
....................    /* 
....................    if (usb_tbe(USB_CDC_DATA_IN_ENDPOINT)) { 
....................       if (usb_cdc_put_buffer_nextin) 
....................          usb_cdc_flush_out_buffer(); 
....................    } 
....................    */ 
....................    if (usb_cdc_put_buffer_free) { 
....................       usb_cdc_flush_out_buffer(); 
....................    } 
.................... } 
....................  
.................... void usb_cdc_putc(char c) { 
....................    while (!usb_cdc_putready()) { 
....................       if (usb_cdc_put_buffer_free) { 
....................          usb_cdc_flush_out_buffer(); 
....................       } 
....................       //delay_ms(500); 
....................       //printf(putc_tbe,"TBE=%U CNT=%U LST=%U\r\n",usb_tbe(USB_CDC_DATA_IN_ENDPOINT), usb_cdc_put_buffer_nextin, usb_cdc_last_data_packet_size); 
....................    } 
....................    usb_cdc_putc_fast(c); 
.................... } 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... BYTE gethex1_usb() { 
....................    char digit; 
....................  
....................    digit = usb_cdc_getc(); 
....................  
....................    usb_cdc_putc(digit); 
....................  
....................    if(digit<='9') 
....................      return(digit-'0'); 
....................    else 
....................      return((toupper(digit)-'A')+10); 
.................... } 
....................  
.................... BYTE gethex_usb() { 
....................    int lo,hi; 
....................  
....................    hi = gethex1_usb(); 
....................    lo = gethex1_usb(); 
....................    if(lo==0xdd) 
....................      return(hi); 
....................    else 
....................      return( hi*16+lo ); 
.................... } 
....................  
.................... void get_string_usb(char* s, int max) { 
....................    int len; 
....................    char c; 
....................  
....................    --max; 
....................    len=0; 
....................    do { 
....................      c=usb_cdc_getc(); 
....................      if(c==8) {  // Backspace 
....................         if(len>0) { 
....................           len--; 
....................           usb_cdc_putc(c); 
....................           usb_cdc_putc(' '); 
....................           usb_cdc_putc(c); 
....................         } 
....................      } else if ((c>=' ')&&(c<='~')) 
....................        if(len<max) { 
....................          s[len++]=c; 
....................          usb_cdc_putc(c); 
....................        } 
....................    } while(c!=13); 
....................    s[len]=0; 
.................... } 
....................  
....................  
.................... // stdlib.h is required for the ato_ conversions 
.................... // in the following functions 
.................... #ifdef _STDLIB 
....................  
.................... signed int get_int_usb() { 
....................   char s[5]; 
....................   signed int i; 
....................  
....................   get_string_usb(s, 5); 
....................  
....................   i=atoi(s); 
....................   return(i); 
.................... } 
....................  
.................... signed long get_long_usb() { 
....................   char s[7]; 
....................   signed long l; 
....................  
....................   get_string_usb(s, 7); 
....................   l=atol(s); 
....................   return(l); 
.................... } 
....................  
.................... float get_float_usb() { 
....................   char s[20]; 
....................   float f; 
....................  
....................   get_string_usb(s, 20); 
....................   f = atof(s); 
....................   return(f); 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Creamos el puerto serie (96008N1) 
.................... #use rs232 (baud=9600,XMIT=PIN_C6,RCV=PIN_C7,BITS=8) 
....................  
....................  
.................... // Configuramos los dispositivos incluidos en la placa. 
.................... #define LED PIN_C2 
.................... #define PULSADOR PIN_A4 
....................  
.................... #define LED_I PIN_D1 
.................... #define LED_D PIN_D0 
....................  
.................... // Alias de funciones 
.................... #define ENCENDER  output_high 
.................... #define APAGAR    output_low 
.................... #define CONMUTAR  output_toggle 
....................  
.................... // Para configurar el usb si esperar al host 
.................... void aure_configurar_usb_sinespera() 
.................... { 
....................    usb_cdc_init(); 
....................    usb_init(); 
.................... } 
....................  
....................  
.................... // Devuelve 1 si el dispositivo cdc está conectado 
.................... int aure_configurar_usb_comprobar() 
.................... { 
....................    if (usb_cdc_connected() && usb_enumerated()) return 1; 
....................    return 0; 
.................... } 
....................  
.................... // Configura el usb y espera al host 
.................... void aure_configurar_usb() 
.................... { 
....................    usb_cdc_init(); 
....................    usb_init(); 
....................    while(!usb_cdc_connected()) {} 
....................    if (usb_enumerated()) printf(usb_cdc_putc, "\r\n\n-AureBoard ¡Lista!\r\n"); 
.................... } 
....................  
....................  
.................... // Inicializa el PIC 
.................... void aure_configurar() 
.................... { 
*
2D56:  CLRF   x87
....................    int t=0; 
....................    printf ("\r\nAUREBOT\r\n_______\r\n\r\nIniciando...\r\n"); 
2D58:  MOVLW  0E
2D5A:  MOVWF  FF6
2D5C:  MOVLW  29
2D5E:  MOVWF  FF7
2D60:  RCALL  2D0C
....................    printf("[Delay 300 ms]\r\n"); 
2D62:  MOVLW  34
2D64:  MOVWF  FF6
2D66:  MOVLW  29
2D68:  MOVWF  FF7
2D6A:  RCALL  2D0C
....................    delay_ms(300); 
2D6C:  MOVLW  02
2D6E:  MOVWF  x88
2D70:  MOVLW  96
2D72:  MOVWF  x9E
2D74:  RCALL  2D2E
2D76:  DECFSZ x88,F
2D78:  BRA    2D70
....................    printf("[Ok]\r\n"); 
2D7A:  MOVLW  46
2D7C:  MOVWF  FF6
2D7E:  MOVLW  29
2D80:  MOVWF  FF7
2D82:  RCALL  2D0C
....................    for (t=0; t<10; t++) 
2D84:  CLRF   x87
2D86:  MOVF   x87,W
2D88:  SUBLW  09
2D8A:  BNC   2D9A
....................    { 
....................       output_toggle(LED); 
2D8C:  BCF    F94.2
2D8E:  BTG    F8B.2
....................       delay_ms(50); 
2D90:  MOVLW  32
2D92:  MOVWF  x9E
2D94:  RCALL  2D2E
....................    } 
2D96:  INCF   x87,F
2D98:  BRA    2D86
....................    printf("-Led Verde\r\n"); 
2D9A:  MOVLW  4E
2D9C:  MOVWF  FF6
2D9E:  MOVLW  29
2DA0:  MOVWF  FF7
2DA2:  RCALL  2D0C
....................  
....................    /* 
....................       Configuramos el usb-serie 
....................       -aure_configurar_usb() 
....................          Espera a que el host configure el dispositivo, la ejecución del 
....................          programa no comienza hasta ese momento. 
....................       -aure_configurar_usb_sinespera() 
....................          No espera a que el host configure el dispositivo. Se puede usar la  
....................          función aure_configurar_usb_comprobar() para saber si el dispositivo 
....................          esta conectado (f()==1 conectado, f()==0 desconectado) 
....................    */ 
....................    //aure_configurar_usb(); 
....................    printf("-USB CDC\r\n"); 
2DA4:  MOVLW  5C
2DA6:  MOVWF  FF6
2DA8:  MOVLW  29
2DAA:  MOVWF  FF7
2DAC:  RCALL  2D0C
....................  
....................    //Configuramos los registros TRIS 
....................    //set_tris_a(0b00000111); 
....................    //set_tris_b(0x00); 
....................    //set_tris_c(0x00); 
....................    //set_tris_d(0x00); 
....................    //set_tris_e(0x00); 
....................    //printf("-Registros TRIS\r\n"); 
....................  
....................    //Configuramos las resistencias de pullup del puerto B 
....................    port_b_pullups(FALSE); 
2DAE:  BSF    FF1.7
....................    printf("-Pull up's OFF\r\n"); 
2DB0:  MOVLW  68
2DB2:  MOVWF  FF6
2DB4:  MOVLW  29
2DB6:  MOVWF  FF7
2DB8:  RCALL  2D0C
....................  
....................    //Todos los puertos a nivel bajo 
....................    //output_a (0x00); 
....................    //output_b (0x00); 
....................    //output_c (0xff); 
....................    //output_d (0x00); 
....................    //output_e (0x00); 
....................    //printf("-Puertos a 0\r\n"); 
....................  
....................    //Configuramos el TIMER0 
....................  
....................    //setup_timer_2( T2_DIV_BY_4, 0x4B, 1); 
....................    //enable_interrupts(INT_timer2); 
....................  
....................  
....................    //Configuramos el TIMER1 
....................    //setup_timer_1(RTCC_INTERNAL|RTCC_DIV_8); 
....................    //set_timer1(0x0000); 
....................  
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    //setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................    setup_adc_ports(NO_ANALOGS); 
2DBA:  MOVF   FC1,W
2DBC:  ANDLW  C0
2DBE:  IORLW  0F
2DC0:  MOVWF  FC1
....................    //setup_adc(ADC_CLOCK_INTERNAL); 
....................  
....................    //Reloj interno 
....................    //setup_adc(ADC_CLOCK_INTERNAL ); 
....................    //set_adc_channel(0); 
....................    //printf("-ADC\r\n"); 
....................  
....................    // Habilitamos el TIMER1 
....................    //enable_interrupts(INT_TIMER1); 
....................  
....................    //Habilitamos la interrupcion serie 
....................    enable_interrupts(int_rda);   printf ("-Interrupcion SERIE\r\n"); 
2DC2:  BSF    F9D.5
2DC4:  MOVLW  7A
2DC6:  MOVWF  FF6
2DC8:  MOVLW  29
2DCA:  MOVWF  FF7
2DCC:  RCALL  2D0C
....................  
....................    // Habilitamos las interrupcione globales 
....................    enable_interrupts(GLOBAL);   printf ("-Interrupciones globales\r\n"); 
2DCE:  MOVLW  C0
2DD0:  IORWF  FF2,F
2DD2:  MOVLW  90
2DD4:  MOVWF  FF6
2DD6:  MOVLW  29
2DD8:  MOVWF  FF7
2DDA:  RCALL  2D0C
....................  
....................  
....................    printf ("¡Lista!\r\n\r\n"); 
2DDC:  MOVLW  AC
2DDE:  MOVWF  FF6
2DE0:  MOVLW  29
2DE2:  MOVWF  FF7
2DE4:  RCALL  2D0C
.................... } 
2DE6:  GOTO   398C (RETURN)
....................  
.................... //Interrupción y gestión serie 
.................... int keypress=0; 
....................  
.................... #int_rda 
.................... void aure_serie_int() 
.................... { 
....................    int key; 
....................    key=getc(); 
*
29B8:  BTFSS  F9E.5
29BA:  BRA    29B8
29BC:  MOVFF  FAE,AE
....................     if (key!=0x00 && key!=0xFF) 
29C0:  MOVF   xAE,F
29C2:  BZ    29DA
29C4:  INCFSZ xAE,W
29C6:  BRA    29CA
29C8:  BRA    29DA
....................     { 
....................       output_toggle(LED); 
29CA:  BCF    F94.2
29CC:  BTG    F8B.2
....................       keypress=key; 
29CE:  MOVFF  AE,7F
....................       //printf ("\rRX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
29D2:  MOVF   xAE,W
29D4:  SUBLW  1B
29D6:  BTFSC  FD8.2
29D8:  RESET
....................     } 
.................... } 
....................  
....................  
29DA:  BCF    F9E.5
29DC:  GOTO   186C
.................... void aure_usb_serie_int() 
.................... { 
....................    int key; 
....................    key=usb_cdc_getc(); 
....................     if (key!=0x00 && key!=0xFF) 
....................     { 
....................       output_toggle(LED); 
....................       keypress=key; 
....................       //printf ("\rUSB RX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
....................     } 
.................... } 
....................  
.................... void barra(int valor) 
.................... { 
....................    float lectura; 
....................    int j, lec[25]; 
....................          lectura=valor; 
....................          lectura=lectura/10; 
....................          for (j=0; j<25; j++) if (j<=lectura) { lec[j]='O'; } else {lec[j]=' ';} 
....................          lec[24]='\0'; 
....................          printf (usb_cdc_putc, "%s | (%u)\r\n", lec, valor); 
.................... } 
....................  
.................... #inline 
.................... int leeradc(int canal) 
.................... { 
....................    set_adc_channel(canal); 
*
36E8:  RLCF   x8F,W
36EA:  MOVWF  00
36EC:  RLCF   00,F
36EE:  MOVLW  FC
36F0:  ANDWF  00,F
36F2:  MOVF   FC2,W
36F4:  ANDLW  C3
36F6:  IORWF  00,W
36F8:  MOVWF  FC2
*
3724:  RLCF   x8F,W
3726:  MOVWF  00
3728:  RLCF   00,F
372A:  MOVLW  FC
372C:  ANDWF  00,F
372E:  MOVF   FC2,W
3730:  ANDLW  C3
3732:  IORWF  00,W
3734:  MOVWF  FC2
*
37BE:  RLCF   x8F,W
37C0:  MOVWF  00
37C2:  RLCF   00,F
37C4:  MOVLW  FC
37C6:  ANDWF  00,F
37C8:  MOVF   FC2,W
37CA:  ANDLW  C3
37CC:  IORWF  00,W
37CE:  MOVWF  FC2
....................    canal=read_adc(); 
*
36FA:  BSF    FC2.1
36FC:  BTFSC  FC2.1
36FE:  BRA    36FC
3700:  MOVFF  FC4,8F
*
3736:  BSF    FC2.1
3738:  BTFSC  FC2.1
373A:  BRA    3738
373C:  MOVFF  FC4,8F
*
37D0:  BSF    FC2.1
37D2:  BTFSC  FC2.1
37D4:  BRA    37D2
37D6:  MOVFF  FC4,8F
....................    return canal; 
*
3704:  MOVFF  8F,01
*
3740:  MOVFF  8F,01
*
37DA:  MOVFF  8F,01
.................... } 
....................  
....................  
.................... #include </lib/flex_lcd.C>       //para la pantalla 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_B4 
.................... //#define LCD_DB5   PIN_B5 
.................... //#define LCD_DB6   PIN_B6 
.................... //#define LCD_DB7   PIN_B7 
.................... // 
.................... //#define LCD_RS    PIN_C0 
.................... //#define LCD_RW    PIN_C1 
.................... //#define LCD_E     PIN_C2 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
.................... #define lcd 1 
.................... #define LCD_DB4 PIN_B5 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B3 
.................... #define LCD_DB7 PIN_B2 
....................  
.................... #define LCD_RS PIN_B7 
.................... #define LCD_E PIN_B6 
.................... //#define LCD_RW PIN_A2 
.................... //#define USE_LCD_RW   1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
.................... //======================================== 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................   0xc, // Display on 
....................   1, // Clear display 
....................   6 // Increment cursor 
.................... }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................   // Note: !! converts an integer expression 
....................   // to a boolean (1 or 0). 
....................   output_bit(LCD_DB4, !!(nibble & 1)); 
*
2E66:  BTFSC  xA4.0
2E68:  BRA    2E6E
2E6A:  BCF    F8A.5
2E6C:  BRA    2E70
2E6E:  BSF    F8A.5
2E70:  BCF    F93.5
....................   output_bit(LCD_DB5, !!(nibble & 2)); 
2E72:  BTFSC  xA4.1
2E74:  BRA    2E7A
2E76:  BCF    F8A.4
2E78:  BRA    2E7C
2E7A:  BSF    F8A.4
2E7C:  BCF    F93.4
....................   output_bit(LCD_DB6, !!(nibble & 4)); 
2E7E:  BTFSC  xA4.2
2E80:  BRA    2E86
2E82:  BCF    F8A.3
2E84:  BRA    2E88
2E86:  BSF    F8A.3
2E88:  BCF    F93.3
....................   output_bit(LCD_DB7, !!(nibble & 8)); 
2E8A:  BTFSC  xA4.3
2E8C:  BRA    2E92
2E8E:  BCF    F8A.2
2E90:  BRA    2E94
2E92:  BSF    F8A.2
2E94:  BCF    F93.2
....................  
....................   delay_us(1); 
2E96:  MOVLW  03
2E98:  MOVWF  00
2E9A:  DECFSZ 00,F
2E9C:  BRA    2E9A
2E9E:  BRA    2EA0
....................   output_high(LCD_E); 
2EA0:  BCF    F93.6
2EA2:  BSF    F8A.6
....................   delay_us(2); 
2EA4:  MOVLW  07
2EA6:  MOVWF  00
2EA8:  DECFSZ 00,F
2EAA:  BRA    2EA8
2EAC:  BRA    2EAE
....................   output_low(LCD_E); 
2EAE:  BCF    F93.6
2EB0:  BCF    F8A.6
.................... } 
2EB2:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine. For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
....................   int8 retval; 
....................   // Create bit variables so that we can easily set 
....................   // individual bits in the retval variable. 
....................   #bit retval_0 = retval.0 
....................   #bit retval_1 = retval.1 
....................   #bit retval_2 = retval.2 
....................   #bit retval_3 = retval.3 
....................  
....................   retval = 0; 
....................  
....................   output_high(LCD_E); 
....................   delay_us(1); 
....................  
....................   retval_0 = input(LCD_DB4); 
....................   retval_1 = input(LCD_DB5); 
....................   retval_2 = input(LCD_DB6); 
....................   retval_3 = input(LCD_DB7); 
....................  
....................   output_low(LCD_E); 
....................  
....................   return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
....................   int8 low; 
....................   int8 high; 
....................  
....................   output_high(LCD_RW); 
....................   delay_cycles(1); 
....................  
....................   high = lcd_read_nibble(); 
....................  
....................   low = lcd_read_nibble(); 
....................  
....................   return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
....................   output_low(LCD_RS); 
2EB4:  BCF    F93.7
2EB6:  BCF    F8A.7
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
2EB8:  MOVLW  EF
2EBA:  MOVWF  00
2EBC:  DECFSZ 00,F
2EBE:  BRA    2EBC
2EC0:  BRA    2EC2
.................... #endif 
....................  
....................   if(address) 
2EC2:  MOVF   xA1,F
2EC4:  BZ    2ECC
....................   output_high(LCD_RS); 
2EC6:  BCF    F93.7
2EC8:  BSF    F8A.7
....................   else 
2ECA:  BRA    2ED0
....................   output_low(LCD_RS); 
2ECC:  BCF    F93.7
2ECE:  BCF    F8A.7
....................  
....................   delay_cycles(1); 
2ED0:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
2ED2:  BCF    F93.6
2ED4:  BCF    F8A.6
....................  
....................   lcd_send_nibble(n >> 4); 
2ED6:  SWAPF  xA2,W
2ED8:  MOVWF  xA3
2EDA:  MOVLW  0F
2EDC:  ANDWF  xA3,F
2EDE:  MOVFF  A3,A4
2EE2:  RCALL  2E66
....................   lcd_send_nibble(n & 0xf); 
2EE4:  MOVF   xA2,W
2EE6:  ANDLW  0F
2EE8:  MOVWF  xA3
2EEA:  MOVWF  xA4
2EEC:  RCALL  2E66
.................... } 
2EEE:  RETLW  00
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
....................   int8 i; 
....................  
....................   output_low(LCD_RS); 
2EF0:  BCF    F93.7
2EF2:  BCF    F8A.7
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
2EF4:  BCF    F93.6
2EF6:  BCF    F8A.6
....................  
....................   delay_ms(15); 
2EF8:  MOVLW  0F
2EFA:  MOVWF  x9E
2EFC:  RCALL  2D2E
....................  
....................   for(i=0 ;i < 3; i++) 
2EFE:  CLRF   x87
2F00:  MOVF   x87,W
2F02:  SUBLW  02
2F04:  BNC   2F16
....................   { 
....................     lcd_send_nibble(0x03); 
2F06:  MOVLW  03
2F08:  MOVWF  xA4
2F0A:  RCALL  2E66
....................     delay_ms(5); 
2F0C:  MOVLW  05
2F0E:  MOVWF  x9E
2F10:  RCALL  2D2E
....................   } 
2F12:  INCF   x87,F
2F14:  BRA    2F00
....................  
....................   lcd_send_nibble(0x02); 
2F16:  MOVLW  02
2F18:  MOVWF  xA4
2F1A:  RCALL  2E66
....................  
....................   for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
2F1C:  CLRF   x87
2F1E:  MOVF   x87,W
2F20:  SUBLW  03
2F22:  BNC   2F48
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
2F24:  CLRF   03
2F26:  MOVF   x87,W
2F28:  MOVFF  FF2,88
2F2C:  BCF    FF2.7
2F2E:  CALL   1A3C
2F32:  BTFSC  x88.7
2F34:  BSF    FF2.7
2F36:  MOVWF  x88
2F38:  CLRF   xA1
2F3A:  MOVWF  xA2
2F3C:  RCALL  2EB4
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled. One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
.................... #ifndef USE_LCD_RW 
.................... delay_ms(5); 
2F3E:  MOVLW  05
2F40:  MOVWF  x9E
2F42:  RCALL  2D2E
.................... #endif 
.................... } 
2F44:  INCF   x87,F
2F46:  BRA    2F1E
....................  
.................... } 
2F48:  GOTO   3998 (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
....................   int8 address; 
....................  
....................   if(y != 1) 
*
2F62:  DECFSZ x9E,W
2F64:  BRA    2F68
2F66:  BRA    2F6E
....................   address = lcd_line_two; 
2F68:  MOVLW  40
2F6A:  MOVWF  x9F
....................   else 
2F6C:  BRA    2F70
....................   address=0; 
2F6E:  CLRF   x9F
....................  
....................   address += x-1; 
2F70:  MOVLW  01
2F72:  SUBWF  x9D,W
2F74:  ADDWF  x9F,F
....................   lcd_send_byte(0, 0x80 | address); 
2F76:  MOVF   x9F,W
2F78:  IORLW  80
2F7A:  MOVWF  xA0
2F7C:  CLRF   xA1
2F7E:  MOVWF  xA2
2F80:  RCALL  2EB4
.................... } 
2F82:  RETLW  00
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................   switch(c) 
....................   { 
2F84:  MOVF   x9C,W
2F86:  XORLW  0C
2F88:  BZ    2F94
2F8A:  XORLW  01
2F8C:  BZ    2FA4
2F8E:  XORLW  05
2F90:  BZ    2FB0
2F92:  BRA    2FBA
....................     case '\f': 
....................       lcd_send_byte(0,1); 
2F94:  CLRF   xA1
2F96:  MOVLW  01
2F98:  MOVWF  xA2
2F9A:  RCALL  2EB4
....................       delay_ms(2); 
2F9C:  MOVLW  02
2F9E:  MOVWF  x9E
2FA0:  RCALL  2D2E
....................       break; 
2FA2:  BRA    2FC6
....................  
....................     case 0x0d: 
....................       lcd_gotoxy(1,2); 
2FA4:  MOVLW  01
2FA6:  MOVWF  x9D
2FA8:  MOVLW  02
2FAA:  MOVWF  x9E
2FAC:  RCALL  2F62
....................       break; 
2FAE:  BRA    2FC6
....................  
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
2FB0:  CLRF   xA1
2FB2:  MOVLW  10
2FB4:  MOVWF  xA2
2FB6:  RCALL  2EB4
....................       break; 
2FB8:  BRA    2FC6
....................  
....................     default: 
....................       lcd_send_byte(1,c); 
2FBA:  MOVLW  01
2FBC:  MOVWF  xA1
2FBE:  MOVFF  9C,A2
2FC2:  RCALL  2EB4
....................       break; 
2FC4:  BRA    2FC6
....................   } 
.................... } 
2FC6:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
....................   char value; 
....................  
....................   lcd_gotoxy(x,y); 
....................  
....................   // Wait until busy flag is low. 
....................   while(bit_test(lcd_read_byte(),7)); 
....................  
....................   output_high(LCD_RS); 
....................   value = lcd_read_byte(); 
....................   output_low(lcd_RS); 
....................  
....................   return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
.................... } 
....................  
.................... void lcd_configurar() 
.................... { 
....................    lcd_init(); lcd_setcursor_vb(0,0);    
....................    //printf(lcd_putc, "Aure         LCD\r READY..."); 
....................    //printf ("-L.C.D.\r\n"); 
....................  
.................... } 
....................  
....................  
.................... #include </lib/cny70.h>          //para configurar y leer los sensores CNY70 
.................... #define cny70 1 
.................... #define CNY_I 2 
.................... #define CNY_D 3 
....................  
....................  
.................... void cny70_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
....................    printf("-ADC\r\n"); 
....................  
....................    printf("-CNY70 configurado\r\n"); 
.................... } 
....................  
.................... #include </lib/servos.h>         //para configurar y mover los servos  
.................... #define servos 1 
.................... #define servos_A PIN_D2 
.................... #define servos_B PIN_D3 
....................  
.................... /* 
.................... 179-15 
.................... */ 
....................  
.................... #define servos_numero   2 
....................  
.................... int servos_p[servos_numero]={90,90}; 
.................... int16 servos_contador=0; 
.................... int int_servo=0; 
....................  
.................... void servos_off() 
.................... { 
....................    // Reloj a 48 Mhz. 
....................    //    -> Objetivo: Interrupcion cada 10 uS (10e-6) 
....................    //    -> ciclo cada 48000000/4 -> 83 nS (83.333e-9) 
....................    //    -> 120=0x78 ciclos. 
....................    //Configuramos el TIMER2 
....................  
....................    disable_interrupts(int_timer2); 
....................    printf ("-TIMER2 desconfigurado\r\n"); 
....................    printf ("-Servos desconectados\r\n"); 
.................... } 
....................  
.................... void servos_configurar() 
.................... { 
....................    // Reloj a 48 Mhz. 
....................    //    -> Objetivo: Interrupcion cada 10 uS (10e-6) 
....................    //    -> ciclo cada 48000000/4 -> 83 nS (83.333e-9) 
....................    //    -> 120=0x78 ciclos. 
....................    //Configuramos el TIMER2 
....................  
....................    servos_contador=0; 
....................    setup_timer_2(T2_DIV_BY_1,0x78,1); 
....................    enable_interrupts(int_timer2); 
....................    printf ("-TIMER2 Configurado\r\n"); 
....................    printf ("-Servos configurados\r\n"); 
.................... } 
....................  
....................  
.................... #int_timer2 
.................... void servos_inttimer() 
.................... { 
....................  
....................    servos_contador++; 
*
2A6A:  INCF   x82,F
2A6C:  BTFSC  FD8.2
2A6E:  INCF   x83,F
....................    //Servos Futaba 3003 
....................    // Pulso minimo 0.3 mS 
....................    // Pulso maximo 2.1 mS 
....................    if (servos_contador>servos_p[0]+45) output_low(servos_A); 
2A70:  MOVLW  2D
2A72:  ADDWF  x80,W
2A74:  MOVF   x83,F
2A76:  BNZ   2A7E
2A78:  SUBWF  x82,W
2A7A:  BZ    2A82
2A7C:  BNC   2A82
2A7E:  BCF    F95.2
2A80:  BCF    F8C.2
....................    if (servos_contador>servos_p[1]+45) output_low(servos_B); 
2A82:  MOVLW  2D
2A84:  ADDWF  x81,W
2A86:  MOVF   x83,F
2A88:  BNZ   2A90
2A8A:  SUBWF  x82,W
2A8C:  BZ    2A94
2A8E:  BNC   2A94
2A90:  BCF    F95.3
2A92:  BCF    F8C.3
....................    if (servos_contador>1998) 
2A94:  MOVF   x83,W
2A96:  SUBLW  06
2A98:  BC    2AB2
2A9A:  XORLW  FF
2A9C:  BNZ   2AA4
2A9E:  MOVF   x82,W
2AA0:  SUBLW  CE
2AA2:  BC    2AB2
....................    { 
....................       output_high(servos_A); 
2AA4:  BCF    F95.2
2AA6:  BSF    F8C.2
....................       output_high(servos_B); 
2AA8:  BCF    F95.3
2AAA:  BSF    F8C.3
....................       servos_contador=0; 
2AAC:  CLRF   x83
2AAE:  CLRF   x82
....................       int_servo++; 
2AB0:  INCF   x84,F
....................    } 
.................... } 
....................  
2AB2:  BCF    F9E.1
2AB4:  GOTO   186C
.................... void servos_mover_a(int grados, int servo) 
.................... { 
....................    int posicion; 
....................    //if (grados>180) grados=180; 
....................    posicion=grados; 
....................    printf ("%i\r\n",posicion); 
....................    //servos_configurar(); 
....................    switch (servo) 
....................    { 
....................       case 1: 
....................          servos_p[0]=posicion; 
....................          break; 
....................       case 2: 
....................          servos_p[1]=posicion; 
....................          break; 
....................    } 
....................    //int_servo=0; 
....................    //while (int_servo<50) 
....................    //{ 
....................    //} 
....................    //servos_off(); 
.................... } 
....................  
.................... void servos_modificar(int grados, int servo, int direccion) 
.................... { 
....................    int posicion; 
....................  
....................  
....................    switch (servo) 
....................    { 
....................       case 1: 
....................          posicion=grados*direccion+servos_p[0]; 
....................          servos_mover_a(posicion,servo); 
....................          break; 
....................       case 2: 
....................          posicion=grados*direccion+servos_p[1]; 
....................          servos_mover_a(posicion,servo); 
....................          break; 
....................    } 
.................... } 
....................  
....................  
....................  
.................... void servos_control_auto() 
.................... { 
....................    int espera=0; 
....................    int grados; 
....................    int direccion=10; 
....................    while(1) 
....................    { 
....................       if (espera>10) 
....................       { 
....................          espera=0; 
....................          grados=grados+direccion; 
....................          if (grados>180) {grados=180; direccion=-direccion;} 
....................          if (grados<=1) {grados=1; direccion=-direccion;} 
....................          servos_mover_a(grados,1); 
....................          servos_mover_a(180-grados,2); 
....................          printf("Servo: %u    \r",grados); 
....................       } else { 
....................          delay_ms(10); 
....................          espera++; 
....................          //printf ("E:%u\r\n",espera); 
....................       } 
....................    } 
.................... } 
....................  
.................... void servos_comprobar() 
.................... { 
....................    int j=0; 
....................    printf (usb_cdc_putc, "Comprobando servos...\r\n"); 
....................    servos_configurar(); 
....................    servos_mover_a(0, 1); 
....................    servos_mover_a(0, 0); 
....................    delay_ms(100); 
....................  
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................       for (  j=0; j<180; j+=10) 
....................       { 
....................          servos_mover_a(j, 1); 
....................          servos_mover_a(180-j, 2); 
....................          printf ("Servos a %u y %u respectivamente.\r\n", j, 180-j); 
....................          delay_ms(100); 
....................          if (usb_cdc_kbhit()) break; 
....................       } 
....................  
....................    } 
.................... } 
....................  
....................  
.................... #include </lib/barra_leds.h>     //para configurar y usar la barra de led 
.................... #define barra_leds 1 
.................... #define beds_time 70 //Tiempo que esta encendido cada led 
....................  
.................... void barraleds_comprobar_b() 
.................... { 
....................       output_high(PIN_B0); 
....................       output_low(PIN_B1); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B1); 
....................       output_low(PIN_B0); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B2); 
....................       output_low(PIN_B1); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B3); 
....................       output_low(PIN_B2); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B4); 
....................       output_low(PIN_B3); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B5); 
....................       output_low(PIN_B4); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B6); 
....................       output_low(PIN_B5); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B7); 
....................       output_low(PIN_B6); 
....................       delay_ms(beds_time); 
....................  
....................  
....................       output_high(PIN_B6); 
....................       output_low(PIN_B7); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B5); 
....................       output_low(PIN_B6); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B4); 
....................       output_low(PIN_B5); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B3); 
....................       output_low(PIN_B4); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B2); 
....................       output_low(PIN_B3); 
....................       delay_ms(beds_time); 
....................       output_high(PIN_B1); 
....................       output_low(PIN_B2); 
....................       delay_ms(beds_time); 
....................  } 
....................  
....................  
.................... void barraleds_comprobar_a() 
.................... { 
....................       output_high(PIN_E2); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_E2); 
....................  
....................       output_high(PIN_E1); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_E1); 
....................  
....................       output_high(PIN_E0); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_E0); 
....................  
....................       output_high(PIN_A5); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_A5); 
....................  
....................       output_high(PIN_A3); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_A3); 
....................  
....................       output_high(PIN_A2); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_A2); 
....................  
....................       output_high(PIN_A1); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_A1); 
....................  
....................       output_high(PIN_A0); 
....................       delay_ms(beds_time); 
....................       output_low(PIN_A0); 
....................  
.................... } 
....................  
.................... #include </lib/motores.h>        //para los motores 
.................... #define motores 1 
.................... #define MIR PIN_D5 
.................... #define MIF PIN_D4 
.................... #define MDR PIN_D7 
.................... #define MDF PIN_D6 
....................  
.................... void motores_patras() 
.................... { 
....................       output_bit(MDF,0); 
*
36A8:  BCF    F8C.6
36AA:  BCF    F95.6
....................       output_bit(MDR,1); 
36AC:  BSF    F8C.7
36AE:  BCF    F95.7
....................       output_bit(MIF,0); 
36B0:  BCF    F8C.4
36B2:  BCF    F95.4
....................       output_bit(MIR,1); 
36B4:  BSF    F8C.5
36B6:  BCF    F95.5
....................  
.................... } 
36B8:  RETLW  00
....................  
.................... void motores_palante() 
.................... { 
....................       output_bit(MDF,1); 
*
3814:  BSF    F8C.6
3816:  BCF    F95.6
....................       output_bit(MDR,0); 
3818:  BCF    F8C.7
381A:  BCF    F95.7
....................       output_bit(MIF,1); 
381C:  BSF    F8C.4
381E:  BCF    F95.4
....................       output_bit(MIR,0); 
3820:  BCF    F8C.5
3822:  BCF    F95.5
.................... } 
3824:  RETLW  00
....................  
.................... void motores_paderecha() 
.................... { 
....................       output_bit(MDF,1); 
*
3874:  BSF    F8C.6
3876:  BCF    F95.6
....................       output_bit(MDR,0); 
3878:  BCF    F8C.7
387A:  BCF    F95.7
....................       output_bit(MIF,0); 
387C:  BCF    F8C.4
387E:  BCF    F95.4
....................       output_bit(MIR,1); 
3880:  BSF    F8C.5
3882:  BCF    F95.5
.................... } 
3884:  GOTO   3904 (RETURN)
....................  
.................... void motores_paizda() 
.................... { 
....................       output_bit(MDF,0); 
*
3860:  BCF    F8C.6
3862:  BCF    F95.6
....................       output_bit(MDR,1); 
3864:  BSF    F8C.7
3866:  BCF    F95.7
....................       output_bit(MIF,1); 
3868:  BSF    F8C.4
386A:  BCF    F95.4
....................       output_bit(MIR,0); 
386C:  BCF    F8C.5
386E:  BCF    F95.5
.................... } 
3870:  GOTO   38E0 (RETURN)
....................  
.................... void motores_parar() 
.................... { 
....................       output_bit(MDF,0); 
*
3802:  BCF    F8C.6
3804:  BCF    F95.6
....................       output_bit(MDR,0); 
3806:  BCF    F8C.7
3808:  BCF    F95.7
....................       output_bit(MIF,0); 
380A:  BCF    F8C.4
380C:  BCF    F95.4
....................       output_bit(MIR,0); 
380E:  BCF    F8C.5
3810:  BCF    F95.5
.................... } 
3812:  RETLW  00
....................  
....................  
....................  
.................... void motores_comprobar() 
.................... { 
....................    printf (usb_cdc_putc, "Comprobando motores...\r\n"); 
....................    printf (usb_cdc_putc, "\tAdelante\r\n"); 
....................    motores_palante(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tAtras\r\n"); 
....................    motores_patras(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tDerecha\r\n"); 
....................    motores_paderecha(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tIzquierda\r\n"); 
....................    motores_paizda(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "Motores comprobados\r\n\r\n"); 
....................    motores_parar(); 
.................... } 
....................  
.................... #include </lib/bumper.h>         //para los bumpers 
.................... #define bumper 1 
.................... #define BUMPER_I PIN_A2 
.................... #define BUMPER_D PIN_A3 
....................  
.................... void bumpers_comprobar() 
.................... { 
....................    int c; 
....................    printf (usb_cdc_putc, "Comprobando bumpers...\r\n"); 
....................    while (1) 
....................    { 
....................       usb_task(); 
....................       if (usb_cdc_kbhit()) 
....................       { 
....................          c=usb_cdc_getc(); 
....................          printf(usb_cdc_putc, "%c\r\n",c); 
....................          if (c==27) return; 
....................       } 
....................       printf (usb_cdc_putc, "Bumper izquierdo: %d Bumper derecho: %d\r\n", input(BUMPER_I), input(BUMPER_D)); 
....................       delay_ms(100); 
....................    } 
.................... } 
....................  
.................... #include </lib/ldr.h>            //para los LDR 
.................... #define ldr 1 
.................... #define LDR_I 1 
.................... #define LDR_D 0 
....................  
.................... void ldr_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    setup_adc_ports(AN0_TO_AN1|VSS_VDD ); 
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
....................    printf("-ADC\r\n"); 
....................    printf("-LDRs configuradas\r\n"); 
.................... } 
....................  
.................... void ldr_comprobar() 
.................... { 
....................    printf (usb_cdc_putc, "Comprobando sensores LDR...\r\n"); 
....................    printf (usb_cdc_putc, "Configurando...\r\n"); 
....................    ldr_configurar(); 
....................    printf (usb_cdc_putc, "\tSensor derecho:\r\n"); 
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................  
....................       barra(leeradc(LDR_D)); 
....................       delay_ms(250); 
....................    } 
....................    usb_cdc_getc(); 
....................    printf (usb_cdc_putc, "\r\n"); 
....................    printf (usb_cdc_putc, "\tSensor izquierdo:\r\n"); 
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................  
....................       barra(leeradc(LDR_I)); 
....................       delay_ms(250); 
....................    } 
....................    usb_cdc_getc(); 
....................    printf (usb_cdc_putc, "\r\n"); 
.................... } 
....................  
.................... #include <TONES.C>               //para generar sonidos 
.................... ////////////////// Driver to generate musical tones ///////////////////// 
.................... ////                                                                 //// 
.................... ////  generate_tone(frequency, duration)     Generates wave at set   //// 
.................... ////                                         frequency (Hz) for set  //// 
.................... ////                                         duration (ms)           //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #ifndef  MUSIC_NOTES 
.................... #define  MUSIC_NOTES 
....................  
.................... //            NOTE                 FREQUENCY 
.................... //                     Octave0  Octave1  Octave2  Octave3 
.................... const long C_NOTE[4]  ={ 262,     523,    1047,    2093}; 
.................... const long Db_NOTE[4] ={ 277,     554,    1109,    2217}; 
.................... const long D_NOTE[4]  ={ 294,     587,    1175,    2349}; 
.................... const long Eb_NOTE[4] ={ 311,     622,    1245,    2489}; 
.................... const long E_NOTE[4]  ={ 330,     659,    1329,    2637}; 
.................... const long F_NOTE[4]  ={ 349,     698,    1397,    2794}; 
.................... const long Gb_NOTE[4] ={ 370,     740,    1480,    2960}; 
.................... const long G_NOTE[4]  ={ 392,     784,    1568,    3136}; 
.................... const long Ab_NOTE[4] ={ 415,     831,    1661,    3322}; 
.................... const long A_NOTE[4]  ={ 440,     880,    1760,    3520}; 
.................... const long Bb_NOTE[4] ={ 466,     923,    1865,    3729}; 
.................... const long B_NOTE[4]  ={ 494,     988,    1976,    3951}; 
.................... #endif 
....................  
.................... #define TONE_PIN  PIN_B0 
....................  
....................  
.................... void do_delay(int ms_delay, int num_ms, int us_delay, int num_us)  { 
....................  int i; 
....................  
....................  for(i=0;i<num_ms;i++) 
*
311A:  CLRF   x9D
311C:  MOVF   x9A,W
311E:  SUBWF  x9D,W
3120:  BC    312C
....................   delay_ms(250); 
3122:  MOVLW  FA
3124:  MOVWF  x9E
3126:  RCALL  2D2E
3128:  INCF   x9D,F
312A:  BRA    311C
....................  delay_ms(ms_delay); 
312C:  MOVFF  99,9E
3130:  RCALL  2D2E
....................  for(i=0;i<num_us;i++) 
3132:  CLRF   x9D
3134:  MOVF   x9C,W
3136:  SUBWF  x9D,W
3138:  BC    3144
....................   delay_us(250); 
313A:  MOVLW  FA
313C:  MOVWF  x9E
313E:  RCALL  30FA
3140:  INCF   x9D,F
3142:  BRA    3134
....................  delay_us(us_delay); 
3144:  MOVFF  9B,9E
3148:  RCALL  30FA
.................... } 
314A:  RETLW  00
....................  
....................  
.................... void generate_tone(long frequency, long duration) 
.................... { 
....................    int32 total_delay_time;                      // in microseconds 
....................    long total_ms_delay_time, total_us_delay_time; 
....................    int num_us_delays, num_ms_delays, ms_delay_time, us_delay_time; 
....................    long num_periods; 
....................  
....................    total_delay_time = (1000000/frequency)/2-10; // calculate total delay time (10 for error) 
314C:  CLRF   xA4
314E:  MOVLW  0F
3150:  MOVWF  xA3
3152:  MOVLW  42
3154:  MOVWF  xA2
3156:  MOVLW  40
3158:  MOVWF  xA1
315A:  CLRF   xA8
315C:  CLRF   xA7
315E:  MOVFF  88,A6
3162:  MOVFF  87,A5
3166:  RCALL  2FE8
3168:  MOVFF  03,9C
316C:  MOVFF  02,9B
3170:  MOVFF  01,9A
3174:  MOVFF  00,99
3178:  BCF    FD8.0
317A:  RRCF   x9C,F
317C:  RRCF   x9B,F
317E:  RRCF   x9A,F
3180:  RRCF   x99,F
3182:  MOVLW  0A
3184:  SUBWF  x99,W
3186:  MOVWF  x8B
3188:  MOVLW  00
318A:  SUBWFB x9A,W
318C:  MOVWF  x8C
318E:  MOVLW  00
3190:  SUBWFB x9B,W
3192:  MOVWF  x8D
3194:  MOVLW  00
3196:  SUBWFB x9C,W
3198:  MOVWF  x8E
....................  
....................    total_ms_delay_time = total_delay_time/1000; // total delay time of ms 
319A:  MOVFF  8E,A4
319E:  MOVFF  8D,A3
31A2:  MOVFF  8C,A2
31A6:  MOVFF  8B,A1
31AA:  CLRF   xA8
31AC:  CLRF   xA7
31AE:  MOVLW  03
31B0:  MOVWF  xA6
31B2:  MOVLW  E8
31B4:  MOVWF  xA5
31B6:  RCALL  2FE8
31B8:  MOVFF  01,90
31BC:  MOVFF  00,8F
....................    num_ms_delays = total_ms_delay_time/250;     // number of 250ms delays needed 
31C0:  MOVFF  90,9A
31C4:  MOVFF  8F,99
31C8:  CLRF   x9C
31CA:  MOVLW  FA
31CC:  MOVWF  x9B
31CE:  RCALL  3062
31D0:  MOVFF  01,94
....................    ms_delay_time = total_ms_delay_time%250;     // left over ms delay time needed 
31D4:  MOVFF  90,9A
31D8:  MOVFF  8F,99
31DC:  CLRF   x9C
31DE:  MOVLW  FA
31E0:  MOVWF  x9B
31E2:  RCALL  3062
31E4:  MOVFF  00,95
....................  
....................    total_us_delay_time = total_delay_time%1000; // total delay time of us (ms already acounted for) 
31E8:  MOVFF  8E,A4
31EC:  MOVFF  8D,A3
31F0:  MOVFF  8C,A2
31F4:  MOVFF  8B,A1
31F8:  CLRF   xA8
31FA:  CLRF   xA7
31FC:  MOVLW  03
31FE:  MOVWF  xA6
3200:  MOVLW  E8
3202:  MOVWF  xA5
3204:  RCALL  2FE8
3206:  MOVFF  FEF,91
320A:  MOVFF  FEC,92
....................    num_us_delays = total_us_delay_time/250;     // number of 250us delays needed 
320E:  MOVFF  92,9A
3212:  MOVFF  91,99
3216:  CLRF   x9C
3218:  MOVLW  FA
321A:  MOVWF  x9B
321C:  RCALL  3062
321E:  MOVFF  01,93
....................    us_delay_time = total_us_delay_time%250;     // left over us delay time needed 
3222:  MOVFF  92,9A
3226:  MOVFF  91,99
322A:  CLRF   x9C
322C:  MOVLW  FA
322E:  MOVWF  x9B
3230:  RCALL  3062
3232:  MOVFF  00,96
....................  
....................    num_periods = ((int32)duration*1000)/(1000000/frequency); 
3236:  CLRF   x9C
3238:  CLRF   x9B
323A:  MOVFF  8A,9A
323E:  MOVFF  89,99
3242:  MOVFF  9C,A0
3246:  MOVFF  9B,9F
324A:  MOVFF  8A,9E
324E:  MOVFF  89,9D
3252:  CLRF   xA4
3254:  CLRF   xA3
3256:  MOVLW  03
3258:  MOVWF  xA2
325A:  MOVLW  E8
325C:  MOVWF  xA1
325E:  BRA    30A4
3260:  MOVFF  03,9C
3264:  MOVFF  02,9B
3268:  MOVFF  01,9A
326C:  MOVFF  00,99
3270:  CLRF   xA4
3272:  MOVLW  0F
3274:  MOVWF  xA3
3276:  MOVLW  42
3278:  MOVWF  xA2
327A:  MOVLW  40
327C:  MOVWF  xA1
327E:  CLRF   xA8
3280:  CLRF   xA7
3282:  MOVFF  88,A6
3286:  MOVFF  87,A5
328A:  RCALL  2FE8
328C:  MOVFF  03,A0
3290:  MOVFF  02,9F
3294:  MOVFF  01,9E
3298:  MOVFF  00,9D
329C:  MOVFF  9C,A4
32A0:  MOVFF  9B,A3
32A4:  MOVFF  9A,A2
32A8:  MOVFF  99,A1
32AC:  MOVFF  03,A8
32B0:  MOVFF  02,A7
32B4:  MOVFF  01,A6
32B8:  MOVFF  00,A5
32BC:  RCALL  2FE8
32BE:  MOVFF  01,98
32C2:  MOVFF  00,97
....................  
....................    while((num_periods--) != 0) 
....................    { 
32C6:  MOVFF  98,03
32CA:  MOVF   x97,W
32CC:  BTFSC  FD8.2
32CE:  DECF   x98,F
32D0:  DECF   x97,F
32D2:  MOVWF  x99
32D4:  MOVFF  03,9A
32D8:  MOVF   x99,F
32DA:  BNZ   32E0
32DC:  MOVF   x9A,F
32DE:  BZ    330E
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
32E0:  MOVFF  95,99
32E4:  MOVFF  94,9A
32E8:  MOVFF  96,9B
32EC:  MOVFF  93,9C
32F0:  RCALL  311A
....................       output_high(TONE_PIN); 
32F2:  BCF    F93.0
32F4:  BSF    F8A.0
....................       do_delay(ms_delay_time, num_ms_delays, us_delay_time, num_us_delays); 
32F6:  MOVFF  95,99
32FA:  MOVFF  94,9A
32FE:  MOVFF  96,9B
3302:  MOVFF  93,9C
3306:  RCALL  311A
....................       output_low(TONE_PIN); 
3308:  BCF    F93.0
330A:  BCF    F8A.0
....................    } 
330C:  BRA    32C6
....................  
....................    return; 
.................... } 
330E:  RETLW  00
....................  
....................  
.................... //DEFINIMOS LOS PINS DEL CHIP DEL AUREBOT QUE UTILIZAREMOS 
....................  
.................... #define iniciox 0b1 
.................... #define inicioy 0b1 
.................... #define IR PIN_A0 
.................... #define LDRI PIN_A1 
.................... #define LDRD PIN_A2 
.................... #define BD PIN_A3 
.................... #define BI PIN_A5 
.................... #define LUCES PIN_E0 
.................... #define INTERMITENTES PIN_E1 
.................... #define ALT PIN_E2 
....................  
.................... //DEFINIMOS LAS FRECUENCIAS Y DURACION DE LAS NOTAS MUSICALES 
....................  
.................... #define DO 522 
.................... #define DO_S 554 
.................... #define RE 588 
.................... #define RE_S 622 
.................... #define MI 660 
.................... #define FA 698 
.................... #define FA_S 740  
.................... #define SOL 784 
.................... #define SOL_S 830 
.................... #define LA 880 
.................... #define LA_S 930 
.................... #define SI 988 
....................  
....................  
.................... #define semicorchea 125 
.................... #define corchea 250 
.................... #define negra 500 
.................... #define blanca 1000 
....................  
.................... //Funcion para configurar el ADC para la entrada de la fuente 
.................... void analogico_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Entrada A3 y A2 ANALOGICA y rango 0-Vdd 
....................    setup_adc_ports(AN0_TO_AN1|VSS_VDD );      
*
2F4C:  MOVF   FC1,W
2F4E:  ANDLW  C0
2F50:  IORLW  0D
2F52:  MOVWF  FC1
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
2F54:  BSF    FC0.0
2F56:  BSF    FC0.1
2F58:  BSF    FC0.2
2F5A:  BCF    FC0.7
2F5C:  BSF    FC2.0
.................... } 
2F5E:  GOTO   39D2 (RETURN)
....................  
.................... void tunel(){ 
*
36BA:  CLRF   x8A
36BC:  CLRF   x89
36BE:  CLRF   x88
36C0:  CLRF   x87
36C2:  CLRF   x8E
36C4:  CLRF   x8D
36C6:  CLRF   x8C
36C8:  CLRF   x8B
....................     
....................    float izqldr=0, derldr=0; 
....................     
....................    printf(lcd_putc,"Buscador\rde luz"); 
36CA:  MOVLW  22
36CC:  MOVWF  FF6
36CE:  MOVLW  2C
36D0:  MOVWF  FF7
36D2:  RCALL  2FC8
....................    delay_ms(1000); 
36D4:  MOVLW  04
36D6:  MOVWF  x8F
36D8:  MOVLW  FA
36DA:  MOVWF  x9E
36DC:  CALL   2D2E
36E0:  DECFSZ x8F,F
36E2:  BRA    36D8
....................     
....................       //Cargamos los valores de los LDR       
....................       izqldr=leeradc(LDRI); 
36E4:  MOVLW  01
36E6:  MOVWF  x8F
*
3708:  CLRF   x90
370A:  MOVFF  01,8F
370E:  RCALL  33C0
3710:  MOVFF  03,8A
3714:  MOVFF  02,89
3718:  MOVFF  01,88
371C:  MOVFF  00,87
....................       derldr=leeradc(LDRD); 
3720:  MOVLW  02
3722:  MOVWF  x8F
*
3744:  CLRF   x90
3746:  MOVFF  01,8F
374A:  RCALL  33C0
374C:  MOVFF  03,8E
3750:  MOVFF  02,8D
3754:  MOVFF  01,8C
3758:  MOVFF  00,8B
....................        
....................       //Pintamos sus valores en la pantalla LCD, analogicos. 
....................       
....................       printf(lcd_putc,"D-%f",derldr); 
375C:  MOVLW  44
375E:  MOVWF  x9C
3760:  RCALL  2F84
3762:  MOVLW  2D
3764:  MOVWF  x9C
3766:  RCALL  2F84
3768:  MOVLW  89
376A:  MOVWF  FE9
376C:  MOVFF  8E,92
3770:  MOVFF  8D,91
3774:  MOVFF  8C,90
3778:  MOVFF  8B,8F
377C:  MOVLW  02
377E:  MOVWF  x93
3780:  RCALL  352A
....................       lcd_gotoxy(iniciox,2); 
3782:  MOVLW  01
3784:  MOVWF  x9D
3786:  MOVLW  02
3788:  MOVWF  x9E
378A:  CALL   2F62
....................       printf(lcd_putc,"I-%f",izqldr); 
378E:  MOVLW  49
3790:  MOVWF  x9C
3792:  CALL   2F84
3796:  MOVLW  2D
3798:  MOVWF  x9C
379A:  CALL   2F84
379E:  MOVLW  89
37A0:  MOVWF  FE9
37A2:  MOVFF  8A,92
37A6:  MOVFF  89,91
37AA:  MOVFF  88,90
37AE:  MOVFF  87,8F
37B2:  MOVLW  02
37B4:  MOVWF  x93
37B6:  RCALL  352A
....................       motores_patras(); 
37B8:  RCALL  36A8
....................    if(leeradc(LDRI)>128) 
37BA:  MOVLW  01
37BC:  MOVWF  x8F
*
37DE:  MOVF   01,W
37E0:  SUBLW  80
37E2:  BC    37EA
....................    { 
....................          Output_high(LUCES); 
37E4:  BCF    F96.0
37E6:  BSF    F8D.0
....................  
....................    } 
....................    else{ 
37E8:  BRA    37FE
....................          delay_ms(5000); 
37EA:  MOVLW  14
37EC:  MOVWF  x8F
37EE:  MOVLW  FA
37F0:  MOVWF  x9E
37F2:  CALL   2D2E
37F6:  DECFSZ x8F,F
37F8:  BRA    37EE
....................          Output_low(LUCES); 
37FA:  BCF    F96.0
37FC:  BCF    F8D.0
....................  
....................    } 
....................  
....................        
....................       //Si la diferencia entre ambos es mayor a un numero determinado 
....................       /*if (abs(izqldr-derldr)>75) 
....................       { 
....................          //Y es el lado derecho el iluminado.. vamos a la derecha 
....................          if (izqldr>derldr) 
....................          {   
....................             motores_paderecha(); 
....................             delay_ms(500); 
....................          } else {  //Sino, iremos a la izquierda 
....................            motores_paizda(); 
....................            delay_ms(500); 
....................              
....................          } 
....................       } else { //Caso de que la diferencia de ambos no cumpla, avanza. 
....................          motores_parar(); 
....................          motores_palante(); 
....................           
....................       }*/ 
....................     
.................... } 
37FE:  GOTO   3C16 (RETURN)
....................  
....................    //FASE 2: APARCAMIENTO 
....................  
.................... void aparcar(){ 
....................  
....................    lcd_gotoxy(1,2); 
*
3826:  MOVLW  01
3828:  MOVWF  x9D
382A:  MOVLW  02
382C:  MOVWF  x9E
382E:  CALL   2F62
....................    printf(lcd_putc,"Aparcamiento"); 
3832:  MOVLW  32
3834:  MOVWF  FF6
3836:  MOVLW  2C
3838:  MOVWF  FF7
383A:  CALL   2FC8
....................    while((input (LDRD)==0)) 
....................    motores_parar(); 
383E:  BSF    F92.2
3840:  BTFSC  F80.2
3842:  BRA    3848
3844:  RCALL  3802
3846:  BRA    383E
....................    motores_palante();                     
3848:  RCALL  3814
....................    delay_ms(500); 
384A:  MOVLW  02
384C:  MOVWF  x87
384E:  MOVLW  FA
3850:  MOVWF  x9E
3852:  CALL   2D2E
3856:  DECFSZ x87,F
3858:  BRA    384E
....................    motores_parar(); 
385A:  RCALL  3802
.................... } 
385C:  GOTO   3C20 (RETURN)
.................... //FASE 3: BUMPERS 
.................... void bumpers(){ 
....................  
....................    if((input(BD)==0 &&(input(BI)==0))){ 
*
3888:  BSF    F92.3
388A:  BTFSC  F80.3
388C:  BRA    3928
388E:  BSF    F92.5
3890:  BTFSC  F80.5
3892:  BRA    3928
....................       motores_parar(); 
3894:  RCALL  3802
....................       motores_palante(); 
3896:  RCALL  3814
....................       generate_tone(SOL, blanca);  //Sonido marcha atras 
3898:  MOVLW  03
389A:  MOVWF  x88
389C:  MOVLW  10
389E:  MOVWF  x87
38A0:  MOVLW  03
38A2:  MOVWF  x8A
38A4:  MOVLW  E8
38A6:  MOVWF  x89
38A8:  RCALL  314C
....................         generate_tone(SOL, blanca);  //Sonido marcha atras 
38AA:  MOVLW  03
38AC:  MOVWF  x88
38AE:  MOVLW  10
38B0:  MOVWF  x87
38B2:  MOVLW  03
38B4:  MOVWF  x8A
38B6:  MOVLW  E8
38B8:  MOVWF  x89
38BA:  RCALL  314C
....................         generate_tone(SOL, blanca);  //Sonido marcha atras 
38BC:  MOVLW  03
38BE:  MOVWF  x88
38C0:  MOVLW  10
38C2:  MOVWF  x87
38C4:  MOVLW  03
38C6:  MOVWF  x8A
38C8:  MOVLW  E8
38CA:  MOVWF  x89
38CC:  RCALL  314C
....................       delay_ms(3000); 
38CE:  MOVLW  0C
38D0:  MOVWF  x87
38D2:  MOVLW  FA
38D4:  MOVWF  x9E
38D6:  CALL   2D2E
38DA:  DECFSZ x87,F
38DC:  BRA    38D2
....................       motores_paizda(); 
38DE:  BRA    3860
....................       delay_ms(3000); 
38E0:  MOVLW  0C
38E2:  MOVWF  x87
38E4:  MOVLW  FA
38E6:  MOVWF  x9E
38E8:  CALL   2D2E
38EC:  DECFSZ x87,F
38EE:  BRA    38E4
....................       motores_patras(); 
38F0:  RCALL  36A8
....................       delay_ms(3000); 
38F2:  MOVLW  0C
38F4:  MOVWF  x87
38F6:  MOVLW  FA
38F8:  MOVWF  x9E
38FA:  CALL   2D2E
38FE:  DECFSZ x87,F
3900:  BRA    38F6
....................       motores_paderecha(); 
3902:  BRA    3874
....................       delay_ms(3000); 
3904:  MOVLW  0C
3906:  MOVWF  x87
3908:  MOVLW  FA
390A:  MOVWF  x9E
390C:  CALL   2D2E
3910:  DECFSZ x87,F
3912:  BRA    3908
....................       motores_patras(); 
3914:  RCALL  36A8
....................       delay_ms(3000); 
3916:  MOVLW  0C
3918:  MOVWF  x87
391A:  MOVLW  FA
391C:  MOVWF  x9E
391E:  CALL   2D2E
3922:  DECFSZ x87,F
3924:  BRA    391A
....................    }else { 
3926:  BRA    393A
....................       motores_patras(); 
3928:  RCALL  36A8
....................       delay_ms(3000); 
392A:  MOVLW  0C
392C:  MOVWF  x87
392E:  MOVLW  FA
3930:  MOVWF  x9E
3932:  CALL   2D2E
3936:  DECFSZ x87,F
3938:  BRA    392E
....................    } 
....................  
.................... } 
393A:  GOTO   3C2A (RETURN)
....................  
....................  
.................... void main(){ 
393E:  CLRF   FF8
3940:  BCF    FD0.7
3942:  BSF    07.7
3944:  CLRF   FEA
3946:  CLRF   FE9
3948:  CLRF   1F
394A:  CLRF   23
394C:  CLRF   x79
394E:  CLRF   x7E
3950:  BSF    FB8.3
3952:  MOVLW  E1
3954:  MOVWF  FAF
3956:  MOVLW  04
3958:  MOVWF  FB0
395A:  MOVLW  A6
395C:  MOVWF  FAC
395E:  MOVLW  90
3960:  MOVWF  FAB
3962:  CLRF   x7F
3964:  CLRF   x83
3966:  CLRF   x82
3968:  CLRF   x84
396A:  MOVF   FC1,W
396C:  ANDLW  C0
396E:  IORLW  0F
3970:  MOVWF  FC1
3972:  MOVLW  07
3974:  MOVWF  FB4
3976:  CLRF   1B
3978:  MOVLW  04
397A:  MOVWF  1C
397C:  MOVLW  0E
397E:  MOVWF  1D
3980:  MOVLW  5A
3982:  MOVWF  x80
3984:  MOVWF  x81
3986:  CLRF   x85
....................    char Flag=0;                           // Flag que cambia cada NInts interrupciones 
....................    int n; 
....................    aure_configurar(); 
3988:  GOTO   2D56
....................    usb_cdc_init(); 
398C:  CALL   1B8C
....................    usb_init(); 
3990:  GOTO   2E58
....................    lcd_init(); 
3994:  GOTO   2EF0
....................    delay_ms(200); 
3998:  MOVLW  C8
399A:  MOVWF  x9E
399C:  CALL   2D2E
....................    //Configuracion de la interrupcion, indicandole que solo se active cuando 
....................    //el bit cambia de bajo a alto. 
....................    enable_interrupts(INT_EXT); 
39A0:  BSF    FF2.4
....................    ext_int_edge(0,L_TO_H); 
39A2:  BSF    FF1.6
....................     //Configuracion del timer0 con desbordamiento con prescaler 16. 
....................     setup_counters(RTCC_INTERNAL,RTCC_DIV_16);// TIMER0: Clock Interno, Presescaler 16 
39A4:  BCF    FD1.0
39A6:  MOVLW  83
39A8:  MOVWF  FD5
....................     setup_timer_1(T1_DISABLED);                // para una RTCC cada 0.08 milisegundos 
39AA:  CLRF   FCD
....................     setup_timer_2(T2_DISABLED,0,1);            // -> 5.24 Segundos = 60 RTCC 
39AC:  MOVLW  00
39AE:  MOVWF  FCA
39B0:  MOVLW  00
39B2:  MOVWF  FCB
....................     setup_comparator(NC_NC_NC_NC); 
39B4:  MOVLW  07
39B6:  MOVWF  FB4
39B8:  MOVF   F92,W
39BA:  MOVWF  F92
39BC:  MOVLW  27
39BE:  MOVWF  00
39C0:  DECFSZ 00,F
39C2:  BRA    39C0
39C4:  BRA    39C6
39C6:  MOVF   FB4,W
39C8:  BCF    FA1.6
....................     setup_vref(FALSE); 
39CA:  CLRF   FB5
....................     enable_interrupts(INT_RTCC);               // Habilito Interrupcion RTCC 
39CC:  BSF    FF2.5
....................       
....................     analogico_configurar(); 
39CE:  GOTO   2F4C
....................     lcd_gotoxy(iniciox,inicioy); 
39D2:  MOVLW  01
39D4:  MOVWF  x9D
39D6:  MOVWF  x9E
39D8:  CALL   2F62
....................     printf(lcd_putc,"Sistema ok "); //Mensaje de inicializacion correcta 
39DC:  MOVLW  40
39DE:  MOVWF  FF6
39E0:  MOVLW  2C
39E2:  MOVWF  FF7
39E4:  CALL   2FC8
....................     delay_ms(500); 
39E8:  MOVLW  02
39EA:  MOVWF  x87
39EC:  MOVLW  FA
39EE:  MOVWF  x9E
39F0:  CALL   2D2E
39F4:  DECFSZ x87,F
39F6:  BRA    39EC
....................      
....................          
....................    set_timer0(0); 
39F8:  CLRF   FD7
39FA:  CLRF   FD6
....................    Flag=0; 
39FC:  CLRF   x85
....................     
....................    while(input(IR)){ 
39FE:  BSF    F92.0
3A00:  BTFSS  F80.0
3A02:  BRA    3A26
....................         lcd_gotoxy(iniciox,inicioy); 
3A04:  MOVLW  01
3A06:  MOVWF  x9D
3A08:  MOVWF  x9E
3A0A:  CALL   2F62
....................         printf(lcd_putc,"Esperando\r modo"); //Mensaje indicando que se pulse ?· 
3A0E:  MOVLW  4C
3A10:  MOVWF  FF6
3A12:  MOVLW  2C
3A14:  MOVWF  FF7
3A16:  CALL   2FC8
....................         lcd_gotoxy(iniciox,inicioy); 
3A1A:  MOVLW  01
3A1C:  MOVWF  x9D
3A1E:  MOVWF  x9E
3A20:  CALL   2F62
....................    } 
3A24:  BRA    39FE
....................    generate_tone(E_NOTE[3],500); 
3A26:  MOVLW  0A
3A28:  MOVWF  x88
3A2A:  MOVLW  4D
3A2C:  MOVWF  x87
3A2E:  MOVLW  01
3A30:  MOVWF  x8A
3A32:  MOVLW  F4
3A34:  MOVWF  x89
3A36:  CALL   314C
....................     
....................    delay_ms(500); 
3A3A:  MOVLW  02
3A3C:  MOVWF  x87
3A3E:  MOVLW  FA
3A40:  MOVWF  x9E
3A42:  CALL   2D2E
3A46:  DECFSZ x87,F
3A48:  BRA    3A3E
....................     
....................    //Mientras la opcion no sean 5 ticks, seguimos trabajando. 
....................    while(n!=5) 
....................    { 
3A4A:  MOVF   x86,W
3A4C:  SUBLW  05
3A4E:  BTFSC  FD8.2
3A50:  BRA    3C94
....................         // Si usamos el USB 
....................         usb_task(); 
3A52:  CALL   2E36
....................         //Fijamos el timer0 a 0 para que empiece a contar 
....................         set_timer0(0); 
3A56:  CLRF   FD7
3A58:  CLRF   FD6
....................         Flag=0; //El indicador de cuando desborda el timer las veces especificadas 
3A5A:  CLRF   x85
....................         n=0; 
3A5C:  CLRF   x86
....................         while(Flag==0) //Espera mientras no se pulse ?· 
....................         { 
3A5E:  MOVF   x85,F
3A60:  BTFSS  FD8.2
3A62:  BRA    3C62
....................             //Hasta que no pasen entre 5-6 segundos para escoger. 
....................             if(!input(IR)){ 
3A64:  BSF    F92.0
3A66:  BTFSC  F80.0
3A68:  BRA    3A7C
....................                n++; 
3A6A:  INCF   x86,F
....................                delay_ms(500); 
3A6C:  MOVLW  02
3A6E:  MOVWF  x87
3A70:  MOVLW  FA
3A72:  MOVWF  x9E
3A74:  CALL   2D2E
3A78:  DECFSZ x87,F
3A7A:  BRA    3A70
....................             } 
....................             //Muestra en el LCD la opcion deseada hasta el momento. 
....................             if(n==0){ 
3A7C:  MOVF   x86,F
3A7E:  BNZ   3AB0
....................                
....................                lcd_gotoxy(iniciox,inicioy); 
3A80:  MOVLW  01
3A82:  MOVWF  x9D
3A84:  MOVWF  x9E
3A86:  CALL   2F62
....................                printf(lcd_putc,"Elegir modo: "); 
3A8A:  MOVLW  5C
3A8C:  MOVWF  FF6
3A8E:  MOVLW  2C
3A90:  MOVWF  FF7
3A92:  CALL   2FC8
....................                lcd_gotoxy(iniciox,2); 
3A96:  MOVLW  01
3A98:  MOVWF  x9D
3A9A:  MOVLW  02
3A9C:  MOVWF  x9E
3A9E:  CALL   2F62
....................                printf(lcd_putc,"5 para salir. "); 
3AA2:  MOVLW  6A
3AA4:  MOVWF  FF6
3AA6:  MOVLW  2C
3AA8:  MOVWF  FF7
3AAA:  CALL   2FC8
....................             }else if(n==1){ 
3AAE:  BRA    3B84
3AB0:  DECFSZ x86,W
3AB2:  BRA    3AE4
....................                 
....................                lcd_gotoxy(iniciox,inicioy); 
3AB4:  MOVLW  01
3AB6:  MOVWF  x9D
3AB8:  MOVWF  x9E
3ABA:  CALL   2F62
....................                printf(lcd_putc,"Modo: ");  
3ABE:  MOVLW  7A
3AC0:  MOVWF  FF6
3AC2:  MOVLW  2C
3AC4:  MOVWF  FF7
3AC6:  CALL   2FC8
....................                lcd_gotoxy(iniciox,2); 
3ACA:  MOVLW  01
3ACC:  MOVWF  x9D
3ACE:  MOVLW  02
3AD0:  MOVWF  x9E
3AD2:  CALL   2F62
....................                printf(lcd_putc,"Tunel "); 
3AD6:  MOVLW  82
3AD8:  MOVWF  FF6
3ADA:  MOVLW  2C
3ADC:  MOVWF  FF7
3ADE:  CALL   2FC8
....................             }else if(n==2){ 
3AE2:  BRA    3B84
3AE4:  MOVF   x86,W
3AE6:  SUBLW  02
3AE8:  BNZ   3B1A
....................                 
....................                lcd_gotoxy(iniciox,inicioy); 
3AEA:  MOVLW  01
3AEC:  MOVWF  x9D
3AEE:  MOVWF  x9E
3AF0:  CALL   2F62
....................                printf(lcd_putc,"Modo: ");  
3AF4:  MOVLW  8A
3AF6:  MOVWF  FF6
3AF8:  MOVLW  2C
3AFA:  MOVWF  FF7
3AFC:  CALL   2FC8
....................                lcd_gotoxy(iniciox,2); 
3B00:  MOVLW  01
3B02:  MOVWF  x9D
3B04:  MOVLW  02
3B06:  MOVWF  x9E
3B08:  CALL   2F62
....................                printf(lcd_putc,"Aparcar"); 
3B0C:  MOVLW  92
3B0E:  MOVWF  FF6
3B10:  MOVLW  2C
3B12:  MOVWF  FF7
3B14:  CALL   2FC8
....................             }else if(n==3){ 
3B18:  BRA    3B84
3B1A:  MOVF   x86,W
3B1C:  SUBLW  03
3B1E:  BNZ   3B50
....................                 
....................                lcd_gotoxy(iniciox,inicioy); 
3B20:  MOVLW  01
3B22:  MOVWF  x9D
3B24:  MOVWF  x9E
3B26:  CALL   2F62
....................                printf(lcd_putc,"Modo: ");  
3B2A:  MOVLW  9A
3B2C:  MOVWF  FF6
3B2E:  MOVLW  2C
3B30:  MOVWF  FF7
3B32:  CALL   2FC8
....................                lcd_gotoxy(iniciox,2); 
3B36:  MOVLW  01
3B38:  MOVWF  x9D
3B3A:  MOVLW  02
3B3C:  MOVWF  x9E
3B3E:  CALL   2F62
....................                printf(lcd_putc,"Bumpers "); 
3B42:  MOVLW  A2
3B44:  MOVWF  FF6
3B46:  MOVLW  2C
3B48:  MOVWF  FF7
3B4A:  CALL   2FC8
....................             }else if(n==4){ 
3B4E:  BRA    3B84
3B50:  MOVF   x86,W
3B52:  SUBLW  04
3B54:  BNZ   3B84
....................                 
....................                lcd_gotoxy(iniciox,inicioy); 
3B56:  MOVLW  01
3B58:  MOVWF  x9D
3B5A:  MOVWF  x9E
3B5C:  CALL   2F62
....................                printf(lcd_putc,"Modo: ");  
3B60:  MOVLW  AC
3B62:  MOVWF  FF6
3B64:  MOVLW  2C
3B66:  MOVWF  FF7
3B68:  CALL   2FC8
....................                lcd_gotoxy(iniciox,2); 
3B6C:  MOVLW  01
3B6E:  MOVWF  x9D
3B70:  MOVLW  02
3B72:  MOVWF  x9E
3B74:  CALL   2F62
....................                printf(lcd_putc,"Salir "); 
3B78:  MOVLW  B4
3B7A:  MOVWF  FF6
3B7C:  MOVLW  2C
3B7E:  MOVWF  FF7
3B80:  CALL   2FC8
....................                   
....................         } 
....................          
....................          
....................         /* Muestra la eleccion deseada.*/ 
....................         lcd_gotoxy(iniciox,inicioy); 
3B84:  MOVLW  01
3B86:  MOVWF  x9D
3B88:  MOVWF  x9E
3B8A:  CALL   2F62
....................         printf(lcd_putc,"Has elegido: %u ",n); //Mensaje indicando que se pulse ?· 
3B8E:  MOVLW  BC
3B90:  MOVWF  FF6
3B92:  MOVLW  2C
3B94:  MOVWF  FF7
3B96:  MOVLW  0D
3B98:  MOVWF  x87
3B9A:  GOTO   3310
3B9E:  MOVFF  86,87
3BA2:  MOVLW  1B
3BA4:  MOVWF  x88
3BA6:  GOTO   3358
3BAA:  MOVLW  20
3BAC:  MOVWF  x9C
3BAE:  CALL   2F84
....................         lcd_gotoxy(iniciox,inicioy); 
3BB2:  MOVLW  01
3BB4:  MOVWF  x9D
3BB6:  MOVWF  x9E
3BB8:  CALL   2F62
....................         delay_ms(2000); 
3BBC:  MOVLW  08
3BBE:  MOVWF  x87
3BC0:  MOVLW  FA
3BC2:  MOVWF  x9E
3BC4:  CALL   2D2E
3BC8:  DECFSZ x87,F
3BCA:  BRA    3BC0
....................          
....................         //Seg? la opcion deseada se activa el modo. 
....................         if(n==0){ 
3BCC:  MOVF   x86,F
3BCE:  BNZ   3C10
....................             //Si la eleccion es 0, pedimos un nuevo intento. 
....................             
....................             lcd_gotoxy(iniciox,inicioy); 
3BD0:  MOVLW  01
3BD2:  MOVWF  x9D
3BD4:  MOVWF  x9E
3BD6:  CALL   2F62
....................             printf(lcd_putc,"Vuelve a "); 
3BDA:  MOVLW  CE
3BDC:  MOVWF  FF6
3BDE:  MOVLW  2C
3BE0:  MOVWF  FF7
3BE2:  CALL   2FC8
....................             lcd_gotoxy(iniciox,2); 
3BE6:  MOVLW  01
3BE8:  MOVWF  x9D
3BEA:  MOVLW  02
3BEC:  MOVWF  x9E
3BEE:  CALL   2F62
....................             printf(lcd_putc,"intentarlo. "); 
3BF2:  MOVLW  D8
3BF4:  MOVWF  FF6
3BF6:  MOVLW  2C
3BF8:  MOVWF  FF7
3BFA:  CALL   2FC8
....................             delay_ms(2000); 
3BFE:  MOVLW  08
3C00:  MOVWF  x87
3C02:  MOVLW  FA
3C04:  MOVWF  x9E
3C06:  CALL   2D2E
3C0A:  DECFSZ x87,F
3C0C:  BRA    3C02
....................         }else if(n==1){ 
3C0E:  BRA    3C60
3C10:  DECFSZ x86,W
3C12:  BRA    3C18
....................             tunel(); 
3C14:  BRA    36BA
....................         }else if(n==2){ 
3C16:  BRA    3C60
3C18:  MOVF   x86,W
3C1A:  SUBLW  02
3C1C:  BNZ   3C22
....................             aparcar(); 
3C1E:  BRA    3826
....................         }else if(n==3){ 
3C20:  BRA    3C60
3C22:  MOVF   x86,W
3C24:  SUBLW  03
3C26:  BNZ   3C2C
....................             bumpers(); 
3C28:  BRA    3888
....................         }else if (n==4){ 
3C2A:  BRA    3C60
3C2C:  MOVF   x86,W
3C2E:  SUBLW  04
3C30:  BNZ   3C60
....................              
....................          lcd_gotoxy(iniciox,inicioy); 
3C32:  MOVLW  01
3C34:  MOVWF  x9D
3C36:  MOVWF  x9E
3C38:  CALL   2F62
....................          printf(lcd_putc,"ERROR: ");  
3C3C:  MOVLW  E6
3C3E:  MOVWF  FF6
3C40:  MOVLW  2C
3C42:  MOVWF  FF7
3C44:  CALL   2FC8
....................          lcd_gotoxy(iniciox,2); 
3C48:  MOVLW  01
3C4A:  MOVWF  x9D
3C4C:  MOVLW  02
3C4E:  MOVWF  x9E
3C50:  CALL   2F62
....................          printf(lcd_putc,"404 ");           
3C54:  MOVLW  EE
3C56:  MOVWF  FF6
3C58:  MOVLW  2C
3C5A:  MOVWF  FF7
3C5C:  CALL   2FC8
....................       } 
....................    } 
3C60:  BRA    3A5E
....................     
....................    lcd_gotoxy(iniciox,inicioy); 
3C62:  MOVLW  01
3C64:  MOVWF  x9D
3C66:  MOVWF  x9E
3C68:  CALL   2F62
....................    printf(lcd_putc,"Programa "); //Mensaje indicando que se pulse ?· 
3C6C:  MOVLW  F4
3C6E:  MOVWF  FF6
3C70:  MOVLW  2C
3C72:  MOVWF  FF7
3C74:  CALL   2FC8
....................    lcd_gotoxy(iniciox,2); 
3C78:  MOVLW  01
3C7A:  MOVWF  x9D
3C7C:  MOVLW  02
3C7E:  MOVWF  x9E
3C80:  CALL   2F62
....................    printf(lcd_putc,"finalizado. "); 
3C84:  MOVLW  FE
3C86:  MOVWF  FF6
3C88:  MOVLW  2C
3C8A:  MOVWF  FF7
3C8C:  CALL   2FC8
....................    return; 
3C90:  BRA    3C94
.................... } 
3C92:  BRA    3A4A
.................... } 
3C94:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8700   PBADEN CCP2C1 MCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
